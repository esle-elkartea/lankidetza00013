package net.idtoki.aveobras.manager;

import java.util.List;

import net.idtoki.aveobras.group.ObrasGroupBean;
import net.idtoki.aveobras.model.Obras;
import net.idtoki.aveobras.model.ObrasPeer;
import net.idtoki.aveobras.model.Uejecuciones;

import org.apache.torque.TorqueException;
import org.apache.torque.util.Criteria;


/**
 * The skeleton for this class was autogenerated by Torque on:
 *
 * [Wed Apr 19 12:33:52 CEST 2006]
 *
 *  You should add additional methods to this class to meet the
 *  application requirements.  This class will only be generated as
 *  long as it does not already exist in the output directory.
 */
public class ObrasManager
    extends BaseObrasManager
{
	public static boolean borraObras(int idBorrar) {

		Criteria c=new Criteria();
		c.add(ObrasPeer.IDOBRA, idBorrar);
		boolean bRet = false;
		try {
			ObrasPeer.doDelete(c);
			bRet = true;
		} catch (TorqueException e) {
			logger.info("No se ha podido borrar la Obra");
			e.printStackTrace();
			bRet = false;
		}
		return bRet;
	}	
	
	public static void duplicarObras(int idDuplicar) {

		Criteria c=new Criteria();
		c.add(ObrasPeer.IDOBRA, idDuplicar);
		try {
			 Obras ob = ObrasManager.getObrass(c).getObras(0);
			 ob.setNew(true);
			 ob.setIdobra(-1);
			 ob.setNombre("(Duplicado)"+ob.getNombre());
			 ObrasGroupBean ogb = new ObrasGroupBean();
			 ogb.setElemento(ob);
			 ogb.save();
			 //logger.info("++++++++++++++Clave de la obra nueva ++++++ : " +ob.getIdobra());
			 duplicarUejecucionesObras(idDuplicar,ob.getIdobra());
		} catch (TorqueException e) {
			logger.info("No se ha podido duplicar la Obra");
			e.printStackTrace();
		}
	}
	public static void duplicarUejecucionesObras(int idDuplicar, int idObra) {

		Criteria c=new Criteria();
		c.add(ObrasPeer.IDOBRA, idDuplicar);
		int i;
		List lista;
		try {
			 lista=ObrasManager.getObrass(c).getObras(0).getUejecucioness();
			 if (lista.size()>0)
			 {
				 for (i=0;i<lista.size();i++)
				 {
					 Uejecuciones uej=(Uejecuciones)lista.get(i);
					 UejecucionesManager.duplicarUejecuciones(uej.getIduejecucion(), idObra);
				 }
			 }
		} catch (TorqueException e) {
			logger.info("No se ha podido duplicar la Obra");
			e.printStackTrace();
		}
	}
	public static float getImporteObras(int idObra)
	{
		float importe=0;
		Criteria c=new Criteria();
		c.add(ObrasPeer.IDOBRA, idObra);
		int i;
		List lista;
		try {
			 lista=ObrasManager.getObrass(c).getObras(0).getUejecucioness();
			 if (lista.size()>0)
			 {
				 for (i=0;i<lista.size();i++)
				 {
					 Uejecuciones uej=(Uejecuciones)lista.get(i);
					 if (uej.getImporte()>0)
					 {
						 importe+=uej.getImporte();
					 }
				 }
			 }
		} catch (TorqueException e) {
			logger.info("No se ha podido recopilar el Importe Total de la Obra");
			e.printStackTrace();
		}
		return importe;
	}
}


