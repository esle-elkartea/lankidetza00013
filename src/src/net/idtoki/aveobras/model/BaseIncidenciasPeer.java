package net.idtoki.aveobras.model;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

import org.apache.torque.NoRowsException;
import org.apache.torque.TooManyRowsException;
import org.apache.torque.Torque;
import org.apache.torque.TorqueException;
import org.apache.torque.map.MapBuilder;
import org.apache.torque.map.TableMap;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.util.BasePeer;
import org.apache.torque.util.Criteria;

import com.workingdogs.village.DataSetException;
import com.workingdogs.village.QueryDataSet;
import com.workingdogs.village.Record;

// Local classes
import net.idtoki.aveobras.model.map.*;


  
  
  
  
/**
 * This class was autogenerated by Torque on:
 *
 * [Wed Oct 25 17:01:04 CEST 2006]
 *
 */
public abstract class BaseIncidenciasPeer
    extends BasePeer
{

    /** the default database name for this class */
    public static final String DATABASE_NAME = "AVEOBRAS-DB";

     /** the table name for this class */
    public static final String TABLE_NAME = "incidencias";

    /**
     * @return the map builder for this peer
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static MapBuilder getMapBuilder()
        throws TorqueException
    {
        return getMapBuilder(IncidenciasMapBuilder.CLASS_NAME);
    }

      /** the column name for the IDINCIDENCIA field */
    public static final String IDINCIDENCIA;
      /** the column name for the IDUEJECUCION field */
    public static final String IDUEJECUCION;
      /** the column name for the IDOPERARIO field */
    public static final String IDOPERARIO;
      /** the column name for the IDMAQUINARIA field */
    public static final String IDMAQUINARIA;
      /** the column name for the IDTIPOINCIDENCIA field */
    public static final String IDTIPOINCIDENCIA;
      /** the column name for the FECHA field */
    public static final String FECHA;
      /** the column name for the REFERENCIA field */
    public static final String REFERENCIA;
      /** the column name for the DESCRIPCION field */
    public static final String DESCRIPCION;
      /** the column name for the OBSERVACIONES field */
    public static final String OBSERVACIONES;
      /** the column name for the HORAS field */
    public static final String HORAS;
      /** the column name for the IMPORTE field */
    public static final String IMPORTE;
      /** the column name for the KILOMETROS field */
    public static final String KILOMETROS;
      /** the column name for the TONELAJE field */
    public static final String TONELAJE;
  
    static
    {
          IDINCIDENCIA = "incidencias.IDINCIDENCIA";
          IDUEJECUCION = "incidencias.IDUEJECUCION";
          IDOPERARIO = "incidencias.IDOPERARIO";
          IDMAQUINARIA = "incidencias.IDMAQUINARIA";
          IDTIPOINCIDENCIA = "incidencias.IDTIPOINCIDENCIA";
          FECHA = "incidencias.FECHA";
          REFERENCIA = "incidencias.REFERENCIA";
          DESCRIPCION = "incidencias.DESCRIPCION";
          OBSERVACIONES = "incidencias.OBSERVACIONES";
          HORAS = "incidencias.HORAS";
          IMPORTE = "incidencias.IMPORTE";
          KILOMETROS = "incidencias.KILOMETROS";
          TONELAJE = "incidencias.TONELAJE";
          if (Torque.isInit())
        {
            try
            {
                getMapBuilder(IncidenciasMapBuilder.CLASS_NAME);
            }
            catch (Exception e)
            {
                log.error("Could not initialize Peer", e);
            }
        }
        else
        {
            Torque.registerMapBuilder(IncidenciasMapBuilder.CLASS_NAME);
        }
    }
 
    /** number of columns for this peer */
    public static final int numColumns =  13;

    /** A class that can be returned by this peer. */
    protected static final String CLASSNAME_DEFAULT =
        "net.idtoki.aveobras.model.Incidencias";

    /** A class that can be returned by this peer. */
    protected static final Class CLASS_DEFAULT = initClass(CLASSNAME_DEFAULT);

    /**
     * Class object initialization method.
     *
     * @param className name of the class to initialize
     * @return the initialized class
     */
    private static Class initClass(String className)
    {
        Class c = null;
        try
        {
            c = Class.forName(className);
        }
        catch (Throwable t)
        {
            log.error("A FATAL ERROR has occurred which should not "
                + "have happened under any circumstance.  Please notify "
                + "the Torque developers <torque-dev@db.apache.org> "
                + "and give as many details as possible (including the error "
                + "stack trace).", t);

            // Error objects should always be propogated.
            if (t instanceof Error)
            {
                throw (Error) t.fillInStackTrace();
            }
        }
        return c;
    }

    /**
     * Get the list of objects for a ResultSet.  Please not that your
     * resultset MUST return columns in the right order.  You can use
     * getFieldNames() in BaseObject to get the correct sequence.
     *
     * @param results the ResultSet
     * @return the list of objects
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List resultSet2Objects(java.sql.ResultSet results)
            throws TorqueException
    {
        try
        {
            QueryDataSet qds = null;
            List rows = null;
            try
            {
                qds = new QueryDataSet(results);
                rows = getSelectResults(qds);
            }
            finally
            {
                if (qds != null)
                {
                    qds.close();
                }
            }

            return populateObjects(rows);
        }
        catch (SQLException e)
        {
            throw new TorqueException(e);
        }
        catch (DataSetException e)
        {
            throw new TorqueException(e);
        }
    }


  
    /**
     * Method to do inserts.
     *
     * @param criteria object used to create the INSERT statement.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static ObjectKey doInsert(Criteria criteria)
        throws TorqueException
    {
        return BaseIncidenciasPeer
            .doInsert(criteria, (Connection) null);
    }

    /**
     * Method to do inserts.  This method is to be used during a transaction,
     * otherwise use the doInsert(Criteria) method.  It will take care of
     * the connection details internally.
     *
     * @param criteria object used to create the INSERT statement.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static ObjectKey doInsert(Criteria criteria, Connection con)
        throws TorqueException
    {
                                                                                
        setDbName(criteria);

        if (con == null)
        {
            return BasePeer.doInsert(criteria);
        }
        else
        {
            return BasePeer.doInsert(criteria, con);
        }
    }

    /**
     * Add all the columns needed to create a new object.
     *
     * @param criteria object containing the columns to add.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void addSelectColumns(Criteria criteria)
            throws TorqueException
    {
          criteria.addSelectColumn(IDINCIDENCIA);
          criteria.addSelectColumn(IDUEJECUCION);
          criteria.addSelectColumn(IDOPERARIO);
          criteria.addSelectColumn(IDMAQUINARIA);
          criteria.addSelectColumn(IDTIPOINCIDENCIA);
          criteria.addSelectColumn(FECHA);
          criteria.addSelectColumn(REFERENCIA);
          criteria.addSelectColumn(DESCRIPCION);
          criteria.addSelectColumn(OBSERVACIONES);
          criteria.addSelectColumn(HORAS);
          criteria.addSelectColumn(IMPORTE);
          criteria.addSelectColumn(KILOMETROS);
          criteria.addSelectColumn(TONELAJE);
      }

    /**
     * Create a new object of type cls from a resultset row starting
     * from a specified offset.  This is done so that you can select
     * other rows than just those needed for this object.  You may
     * for example want to create two objects from the same row.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static Incidencias row2Object(Record row,
                                             int offset,
                                             Class cls)
        throws TorqueException
    {
        try
        {
            Incidencias obj = (Incidencias) cls.newInstance();
            IncidenciasPeer.populateObject(row, offset, obj);
                  obj.setModified(false);
              obj.setNew(false);

            return obj;
        }
        catch (InstantiationException e)
        {
            throw new TorqueException(e);
        }
        catch (IllegalAccessException e)
        {
            throw new TorqueException(e);
        }
    }

    /**
     * Populates an object from a resultset row starting
     * from a specified offset.  This is done so that you can select
     * other rows than just those needed for this object.  You may
     * for example want to create two objects from the same row.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void populateObject(Record row,
                                      int offset,
                                      Incidencias obj)
        throws TorqueException
    {
        try
        {
                obj.setIdincidencia(row.getValue(offset + 0).asInt());
                  obj.setIduejecucion(row.getValue(offset + 1).asInt());
                  obj.setIdoperario(row.getValue(offset + 2).asInt());
                  obj.setIdmaquinaria(row.getValue(offset + 3).asInt());
                  obj.setIdtipoincidencia(row.getValue(offset + 4).asInt());
                  obj.setFecha(row.getValue(offset + 5).asString());
                  obj.setReferencia(row.getValue(offset + 6).asString());
                  obj.setDescripcion(row.getValue(offset + 7).asString());
                  obj.setObservaciones(row.getValue(offset + 8).asString());
                  obj.setHoras(row.getValue(offset + 9).asDouble());
                  obj.setImporte(row.getValue(offset + 10).asDouble());
                  obj.setKilometros(row.getValue(offset + 11).asDouble());
                  obj.setTonelaje(row.getValue(offset + 12).asDouble());
              }
        catch (DataSetException e)
        {
            throw new TorqueException(e);
        }
    }

    /**
     * Method to do selects.
     *
     * @param criteria object used to create the SELECT statement.
     * @return List of selected Objects
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List doSelect(Criteria criteria) throws TorqueException
    {
        return populateObjects(doSelectVillageRecords(criteria));
    }

    /**
     * Method to do selects within a transaction.
     *
     * @param criteria object used to create the SELECT statement.
     * @param con the connection to use
     * @return List of selected Objects
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List doSelect(Criteria criteria, Connection con)
        throws TorqueException
    {
        return populateObjects(doSelectVillageRecords(criteria, con));
    }

    /**
     * Grabs the raw Village records to be formed into objects.
     * This method handles connections internally.  The Record objects
     * returned by this method should be considered readonly.  Do not
     * alter the data and call save(), your results may vary, but are
     * certainly likely to result in hard to track MT bugs.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List doSelectVillageRecords(Criteria criteria)
        throws TorqueException
    {
        return BaseIncidenciasPeer
            .doSelectVillageRecords(criteria, (Connection) null);
    }

    /**
     * Grabs the raw Village records to be formed into objects.
     * This method should be used for transactions
     *
     * @param criteria object used to create the SELECT statement.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List doSelectVillageRecords(Criteria criteria, Connection con)
        throws TorqueException
    {
        if (criteria.getSelectColumns().size() == 0)
        {
            addSelectColumns(criteria);
        }

                                                                                
        setDbName(criteria);

        // BasePeer returns a List of Value (Village) arrays.  The array
        // order follows the order columns were placed in the Select clause.
        if (con == null)
        {
            return BasePeer.doSelect(criteria);
        }
        else
        {
            return BasePeer.doSelect(criteria, con);
        }
    }

    /**
     * The returned List will contain objects of the default type or
     * objects that inherit from the default.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List populateObjects(List records)
        throws TorqueException
    {
        List results = new ArrayList(records.size());

        // populate the object(s)
        for (int i = 0; i < records.size(); i++)
        {
            Record row = (Record) records.get(i);
              results.add(IncidenciasPeer.row2Object(row, 1,
                IncidenciasPeer.getOMClass()));
          }
        return results;
    }
 

    /**
     * The class that the Peer will make instances of.
     * If the BO is abstract then you must implement this method
     * in the BO.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static Class getOMClass()
        throws TorqueException
    {
        return CLASS_DEFAULT;
    }

    /**
     * Method to do updates.
     *
     * @param criteria object containing data that is used to create the UPDATE
     *        statement.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doUpdate(Criteria criteria) throws TorqueException
    {
         BaseIncidenciasPeer
            .doUpdate(criteria, (Connection) null);
    }

    /**
     * Method to do updates.  This method is to be used during a transaction,
     * otherwise use the doUpdate(Criteria) method.  It will take care of
     * the connection details internally.
     *
     * @param criteria object containing data that is used to create the UPDATE
     *        statement.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doUpdate(Criteria criteria, Connection con)
        throws TorqueException
    {
        Criteria selectCriteria = new Criteria(DATABASE_NAME, 2);
                   selectCriteria.put(IDINCIDENCIA, criteria.remove(IDINCIDENCIA));
                                                                                                                              
        setDbName(criteria);

        if (con == null)
        {
            BasePeer.doUpdate(selectCriteria, criteria);
        }
        else
        {
            BasePeer.doUpdate(selectCriteria, criteria, con);
        }
    }

    /**
     * Method to do deletes.
     *
     * @param criteria object containing data that is used DELETE from database.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
     public static void doDelete(Criteria criteria) throws TorqueException
     {
         IncidenciasPeer
            .doDelete(criteria, (Connection) null);
     }

    /**
     * Method to do deletes.  This method is to be used during a transaction,
     * otherwise use the doDelete(Criteria) method.  It will take care of
     * the connection details internally.
     *
     * @param criteria object containing data that is used DELETE from database.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
     public static void doDelete(Criteria criteria, Connection con)
        throws TorqueException
     {
                                                                                
        setDbName(criteria);

        if (con == null)
        {
            BasePeer.doDelete(criteria);
        }
        else
        {
            BasePeer.doDelete(criteria, con);
        }
     }

    /**
     * Method to do selects
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List doSelect(Incidencias obj) throws TorqueException
    {
        return doSelect(buildSelectCriteria(obj));
    }

    /**
     * Method to do inserts
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doInsert(Incidencias obj) throws TorqueException
    {
          obj.setPrimaryKey(doInsert(buildCriteria(obj)));
          obj.setNew(false);
        obj.setModified(false);
    }

    /**
     * @param obj the data object to update in the database.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doUpdate(Incidencias obj) throws TorqueException
    {
        doUpdate(buildCriteria(obj));
        obj.setModified(false);
    }

    /**
     * @param obj the data object to delete in the database.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doDelete(Incidencias obj) throws TorqueException
    {
        doDelete(buildSelectCriteria(obj));
    }

    /**
     * Method to do inserts.  This method is to be used during a transaction,
     * otherwise use the doInsert(Incidencias) method.  It will take
     * care of the connection details internally.
     *
     * @param obj the data object to insert into the database.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doInsert(Incidencias obj, Connection con)
        throws TorqueException
    {
          obj.setPrimaryKey(doInsert(buildCriteria(obj), con));
          obj.setNew(false);
        obj.setModified(false);
    }

    /**
     * Method to do update.  This method is to be used during a transaction,
     * otherwise use the doUpdate(Incidencias) method.  It will take
     * care of the connection details internally.
     *
     * @param obj the data object to update in the database.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doUpdate(Incidencias obj, Connection con)
        throws TorqueException
    {
        doUpdate(buildCriteria(obj), con);
        obj.setModified(false);
    }

    /**
     * Method to delete.  This method is to be used during a transaction,
     * otherwise use the doDelete(Incidencias) method.  It will take
     * care of the connection details internally.
     *
     * @param obj the data object to delete in the database.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doDelete(Incidencias obj, Connection con)
        throws TorqueException
    {
        doDelete(buildSelectCriteria(obj), con);
    }

    /**
     * Method to do deletes.
     *
     * @param pk ObjectKey that is used DELETE from database.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doDelete(ObjectKey pk) throws TorqueException
    {
        BaseIncidenciasPeer
           .doDelete(pk, (Connection) null);
    }

    /**
     * Method to delete.  This method is to be used during a transaction,
     * otherwise use the doDelete(ObjectKey) method.  It will take
     * care of the connection details internally.
     *
     * @param pk the primary key for the object to delete in the database.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doDelete(ObjectKey pk, Connection con)
        throws TorqueException
    {
        doDelete(buildCriteria(pk), con);
    }

    /** Build a Criteria object from an ObjectKey */
    public static Criteria buildCriteria( ObjectKey pk )
    {
        Criteria criteria = new Criteria();
              criteria.add(IDINCIDENCIA, pk);
          return criteria;
     }

    /** Build a Criteria object from the data object for this peer */
    public static Criteria buildCriteria( Incidencias obj )
    {
        Criteria criteria = new Criteria(DATABASE_NAME);
              if (!obj.isNew())
            criteria.add(IDINCIDENCIA, obj.getIdincidencia());
              criteria.add(IDUEJECUCION, obj.getIduejecucion());
              criteria.add(IDOPERARIO, obj.getIdoperario());
              criteria.add(IDMAQUINARIA, obj.getIdmaquinaria());
              criteria.add(IDTIPOINCIDENCIA, obj.getIdtipoincidencia());
              criteria.add(FECHA, obj.getFecha());
              criteria.add(REFERENCIA, obj.getReferencia());
              criteria.add(DESCRIPCION, obj.getDescripcion());
              criteria.add(OBSERVACIONES, obj.getObservaciones());
              criteria.add(HORAS, obj.getHoras());
              criteria.add(IMPORTE, obj.getImporte());
              criteria.add(KILOMETROS, obj.getKilometros());
              criteria.add(TONELAJE, obj.getTonelaje());
          return criteria;
    }

    /** Build a Criteria object from the data object for this peer, skipping all binary columns */
    public static Criteria buildSelectCriteria( Incidencias obj )
    {
        Criteria criteria = new Criteria(DATABASE_NAME);
              if (!obj.isNew())
                    criteria.add(IDINCIDENCIA, obj.getIdincidencia());
                          criteria.add(IDUEJECUCION, obj.getIduejecucion());
                          criteria.add(IDOPERARIO, obj.getIdoperario());
                          criteria.add(IDMAQUINARIA, obj.getIdmaquinaria());
                          criteria.add(IDTIPOINCIDENCIA, obj.getIdtipoincidencia());
                          criteria.add(FECHA, obj.getFecha());
                          criteria.add(REFERENCIA, obj.getReferencia());
                          criteria.add(DESCRIPCION, obj.getDescripcion());
                          criteria.add(OBSERVACIONES, obj.getObservaciones());
                          criteria.add(HORAS, obj.getHoras());
                          criteria.add(IMPORTE, obj.getImporte());
                          criteria.add(KILOMETROS, obj.getKilometros());
                          criteria.add(TONELAJE, obj.getTonelaje());
              return criteria;
    }
 
    
        /**
     * Retrieve a single object by pk
     *
     * @param pk the primary key
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     * @throws NoRowsException Primary key was not found in database.
     * @throws TooManyRowsException Primary key was not found in database.
     */
    public static Incidencias retrieveByPK(int pk)
        throws TorqueException, NoRowsException, TooManyRowsException
    {
        return retrieveByPK(SimpleKey.keyFor(pk));
    }

    /**
     * Retrieve a single object by pk
     *
     * @param pk the primary key
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     * @throws NoRowsException Primary key was not found in database.
     * @throws TooManyRowsException Primary key was not found in database.
     */
    public static Incidencias retrieveByPK(int pk, Connection con)
        throws TorqueException, NoRowsException, TooManyRowsException
    {
        return retrieveByPK(SimpleKey.keyFor(pk), con);
    }
  
    /**
     * Retrieve a single object by pk
     *
     * @param pk the primary key
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     * @throws NoRowsException Primary key was not found in database.
     * @throws TooManyRowsException Primary key was not found in database.
     */
    public static Incidencias retrieveByPK(ObjectKey pk)
        throws TorqueException, NoRowsException, TooManyRowsException
    {
        Connection db = null;
        Incidencias retVal = null;
        try
        {
            db = Torque.getConnection(DATABASE_NAME);
            retVal = retrieveByPK(pk, db);
        }
        finally
        {
            Torque.closeConnection(db);
        }
        return(retVal);
    }

    /**
     * Retrieve a single object by pk
     *
     * @param pk the primary key
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     * @throws NoRowsException Primary key was not found in database.
     * @throws TooManyRowsException Primary key was not found in database.
     */
    public static Incidencias retrieveByPK(ObjectKey pk, Connection con)
        throws TorqueException, NoRowsException, TooManyRowsException
    {
        Criteria criteria = buildCriteria(pk);
        List v = doSelect(criteria, con);
        if (v.size() == 0)
        {
            throw new NoRowsException("Failed to select a row.");
        }
        else if (v.size() > 1)
        {
            throw new TooManyRowsException("Failed to select only one row.");
        }
        else
        {
            return (Incidencias)v.get(0);
        }
    }

    /**
     * Retrieve a multiple objects by pk
     *
     * @param pks List of primary keys
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List retrieveByPKs(List pks)
        throws TorqueException
    {
        Connection db = null;
        List retVal = null;
        try
        {
           db = Torque.getConnection(DATABASE_NAME);
           retVal = retrieveByPKs(pks, db);
        }
        finally
        {
            Torque.closeConnection(db);
        }
        return(retVal);
    }

    /**
     * Retrieve a multiple objects by pk
     *
     * @param pks List of primary keys
     * @param dbcon the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List retrieveByPKs( List pks, Connection dbcon )
        throws TorqueException
    {
        List objs = null;
        if (pks == null || pks.size() == 0)
        {
            objs = new LinkedList();
        }
        else
        {
            Criteria criteria = new Criteria();
              criteria.addIn( IDINCIDENCIA, pks );
          objs = doSelect(criteria, dbcon);
        }
        return objs;
    }

 



                
                                              
                
                

    /**
     * selects a collection of Incidencias objects pre-filled with their
     * Maquinarias objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in IncidenciasPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinMaquinarias(Criteria criteria)
        throws TorqueException
    {
        setDbName(criteria);

        IncidenciasPeer.addSelectColumns(criteria);
        int offset = numColumns + 1;
        MaquinariasPeer.addSelectColumns(criteria);


                        criteria.addJoin(IncidenciasPeer.IDMAQUINARIA,
            MaquinariasPeer.IDMAQUINARIA);
        

                                                                                                                                                                                                                                                  
        List rows = BasePeer.doSelect(criteria);
        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

                            Class omClass = IncidenciasPeer.getOMClass();
                    Incidencias obj1 = (Incidencias) IncidenciasPeer
                .row2Object(row, 1, omClass);
                     omClass = MaquinariasPeer.getOMClass();
                    Maquinarias obj2 = (Maquinarias)MaquinariasPeer
                .row2Object(row, offset, omClass);

            boolean newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Incidencias temp_obj1 = (Incidencias)results.get(j);
                Maquinarias temp_obj2 = (Maquinarias)temp_obj1.getMaquinarias();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                              break;
                }
            }
                      results.add(obj1);
        }
        return results;
    }
                                                            
                
                

    /**
     * selects a collection of Incidencias objects pre-filled with their
     * Operarios objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in IncidenciasPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinOperarios(Criteria criteria)
        throws TorqueException
    {
        setDbName(criteria);

        IncidenciasPeer.addSelectColumns(criteria);
        int offset = numColumns + 1;
        OperariosPeer.addSelectColumns(criteria);


                        criteria.addJoin(IncidenciasPeer.IDOPERARIO,
            OperariosPeer.IDOPERARIO);
        

                                                                                                                                                                                                                                                  
        List rows = BasePeer.doSelect(criteria);
        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

                            Class omClass = IncidenciasPeer.getOMClass();
                    Incidencias obj1 = (Incidencias) IncidenciasPeer
                .row2Object(row, 1, omClass);
                     omClass = OperariosPeer.getOMClass();
                    Operarios obj2 = (Operarios)OperariosPeer
                .row2Object(row, offset, omClass);

            boolean newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Incidencias temp_obj1 = (Incidencias)results.get(j);
                Operarios temp_obj2 = (Operarios)temp_obj1.getOperarios();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                              break;
                }
            }
                      results.add(obj1);
        }
        return results;
    }
                                                            
                
                

    /**
     * selects a collection of Incidencias objects pre-filled with their
     * Tipoincidencias objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in IncidenciasPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinTipoincidencias(Criteria criteria)
        throws TorqueException
    {
        setDbName(criteria);

        IncidenciasPeer.addSelectColumns(criteria);
        int offset = numColumns + 1;
        TipoincidenciasPeer.addSelectColumns(criteria);


                        criteria.addJoin(IncidenciasPeer.IDTIPOINCIDENCIA,
            TipoincidenciasPeer.IDTIPOINCIDENCIA);
        

                                                                                                                                                                                                                                                  
        List rows = BasePeer.doSelect(criteria);
        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

                            Class omClass = IncidenciasPeer.getOMClass();
                    Incidencias obj1 = (Incidencias) IncidenciasPeer
                .row2Object(row, 1, omClass);
                     omClass = TipoincidenciasPeer.getOMClass();
                    Tipoincidencias obj2 = (Tipoincidencias)TipoincidenciasPeer
                .row2Object(row, offset, omClass);

            boolean newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Incidencias temp_obj1 = (Incidencias)results.get(j);
                Tipoincidencias temp_obj2 = (Tipoincidencias)temp_obj1.getTipoincidencias();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                              break;
                }
            }
                      results.add(obj1);
        }
        return results;
    }
                                                            
                
                

    /**
     * selects a collection of Incidencias objects pre-filled with their
     * Uejecuciones objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in IncidenciasPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinUejecuciones(Criteria criteria)
        throws TorqueException
    {
        setDbName(criteria);

        IncidenciasPeer.addSelectColumns(criteria);
        int offset = numColumns + 1;
        UejecucionesPeer.addSelectColumns(criteria);


                        criteria.addJoin(IncidenciasPeer.IDUEJECUCION,
            UejecucionesPeer.IDUEJECUCION);
        

                                                                                                                                                                                                                                                  
        List rows = BasePeer.doSelect(criteria);
        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

                            Class omClass = IncidenciasPeer.getOMClass();
                    Incidencias obj1 = (Incidencias) IncidenciasPeer
                .row2Object(row, 1, omClass);
                     omClass = UejecucionesPeer.getOMClass();
                    Uejecuciones obj2 = (Uejecuciones)UejecucionesPeer
                .row2Object(row, offset, omClass);

            boolean newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Incidencias temp_obj1 = (Incidencias)results.get(j);
                Uejecuciones temp_obj2 = (Uejecuciones)temp_obj1.getUejecuciones();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                              break;
                }
            }
                      results.add(obj1);
        }
        return results;
    }
                    
  
                                              
          
        
                                  
                

    /**
     * selects a collection of Incidencias objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in IncidenciasPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptMaquinarias(Criteria criteria)
        throws TorqueException
    {
        setDbName(criteria);

        addSelectColumns(criteria);
        int offset2 = numColumns + 1;
                                    
                                                  
                    OperariosPeer.addSelectColumns(criteria);
        int offset3 = offset2 + OperariosPeer.numColumns;
                                                                
                    TipoincidenciasPeer.addSelectColumns(criteria);
        int offset4 = offset3 + TipoincidenciasPeer.numColumns;
                                                                
                    UejecucionesPeer.addSelectColumns(criteria);
        int offset5 = offset4 + UejecucionesPeer.numColumns;
                                                                                                                                                                                                                                                                                              
        List rows = BasePeer.doSelect(criteria);
        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record)rows.get(i);

                            Class omClass = IncidenciasPeer.getOMClass();
                    Incidencias obj1 = (Incidencias)IncidenciasPeer
                .row2Object(row, 1, omClass);
                                                
                                                                  
                                                        
                            
              
                           omClass = OperariosPeer.getOMClass();
                          Operarios obj2 = (Operarios)OperariosPeer
                .row2Object( row, offset2, omClass);

               boolean  newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Incidencias temp_obj1 = (Incidencias)results.get(j);
                Operarios temp_obj2 = (Operarios)temp_obj1.getOperarios();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                                    break;
                }
            }
                                                                                    
                                                        
                            
              
                           omClass = TipoincidenciasPeer.getOMClass();
                          Tipoincidencias obj3 = (Tipoincidencias)TipoincidenciasPeer
                .row2Object( row, offset3, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Incidencias temp_obj1 = (Incidencias)results.get(j);
                Tipoincidencias temp_obj3 = (Tipoincidencias)temp_obj1.getTipoincidencias();
                if (temp_obj3.getPrimaryKey().equals(obj3.getPrimaryKey()))
                {
                    newObject = false;
                                    break;
                }
            }
                                                                                    
                                                        
                            
              
                           omClass = UejecucionesPeer.getOMClass();
                          Uejecuciones obj4 = (Uejecuciones)UejecucionesPeer
                .row2Object( row, offset4, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Incidencias temp_obj1 = (Incidencias)results.get(j);
                Uejecuciones temp_obj4 = (Uejecuciones)temp_obj1.getUejecuciones();
                if (temp_obj4.getPrimaryKey().equals(obj4.getPrimaryKey()))
                {
                    newObject = false;
                                    break;
                }
            }
                                                                results.add(obj1);
        }
        return results;
    }
        
        
                                  
                

    /**
     * selects a collection of Incidencias objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in IncidenciasPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptOperarios(Criteria criteria)
        throws TorqueException
    {
        setDbName(criteria);

        addSelectColumns(criteria);
        int offset2 = numColumns + 1;
                                    
                    MaquinariasPeer.addSelectColumns(criteria);
        int offset3 = offset2 + MaquinariasPeer.numColumns;
                                                                
                                                  
                    TipoincidenciasPeer.addSelectColumns(criteria);
        int offset4 = offset3 + TipoincidenciasPeer.numColumns;
                                                                
                    UejecucionesPeer.addSelectColumns(criteria);
        int offset5 = offset4 + UejecucionesPeer.numColumns;
                                                                                                                                                                                                                                                                                              
        List rows = BasePeer.doSelect(criteria);
        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record)rows.get(i);

                            Class omClass = IncidenciasPeer.getOMClass();
                    Incidencias obj1 = (Incidencias)IncidenciasPeer
                .row2Object(row, 1, omClass);
                                                
                                                        
                            
              
                           omClass = MaquinariasPeer.getOMClass();
                          Maquinarias obj2 = (Maquinarias)MaquinariasPeer
                .row2Object( row, offset2, omClass);

               boolean  newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Incidencias temp_obj1 = (Incidencias)results.get(j);
                Maquinarias temp_obj2 = (Maquinarias)temp_obj1.getMaquinarias();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                                    break;
                }
            }
                                                                                    
                                                                  
                                                        
                            
              
                           omClass = TipoincidenciasPeer.getOMClass();
                          Tipoincidencias obj3 = (Tipoincidencias)TipoincidenciasPeer
                .row2Object( row, offset3, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Incidencias temp_obj1 = (Incidencias)results.get(j);
                Tipoincidencias temp_obj3 = (Tipoincidencias)temp_obj1.getTipoincidencias();
                if (temp_obj3.getPrimaryKey().equals(obj3.getPrimaryKey()))
                {
                    newObject = false;
                                    break;
                }
            }
                                                                                    
                                                        
                            
              
                           omClass = UejecucionesPeer.getOMClass();
                          Uejecuciones obj4 = (Uejecuciones)UejecucionesPeer
                .row2Object( row, offset4, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Incidencias temp_obj1 = (Incidencias)results.get(j);
                Uejecuciones temp_obj4 = (Uejecuciones)temp_obj1.getUejecuciones();
                if (temp_obj4.getPrimaryKey().equals(obj4.getPrimaryKey()))
                {
                    newObject = false;
                                    break;
                }
            }
                                                                results.add(obj1);
        }
        return results;
    }
        
        
                                  
                

    /**
     * selects a collection of Incidencias objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in IncidenciasPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptTipoincidencias(Criteria criteria)
        throws TorqueException
    {
        setDbName(criteria);

        addSelectColumns(criteria);
        int offset2 = numColumns + 1;
                                    
                    MaquinariasPeer.addSelectColumns(criteria);
        int offset3 = offset2 + MaquinariasPeer.numColumns;
                                                                
                    OperariosPeer.addSelectColumns(criteria);
        int offset4 = offset3 + OperariosPeer.numColumns;
                                                                
                                                  
                    UejecucionesPeer.addSelectColumns(criteria);
        int offset5 = offset4 + UejecucionesPeer.numColumns;
                                                                                                                                                                                                                                                                                              
        List rows = BasePeer.doSelect(criteria);
        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record)rows.get(i);

                            Class omClass = IncidenciasPeer.getOMClass();
                    Incidencias obj1 = (Incidencias)IncidenciasPeer
                .row2Object(row, 1, omClass);
                                                
                                                        
                            
              
                           omClass = MaquinariasPeer.getOMClass();
                          Maquinarias obj2 = (Maquinarias)MaquinariasPeer
                .row2Object( row, offset2, omClass);

               boolean  newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Incidencias temp_obj1 = (Incidencias)results.get(j);
                Maquinarias temp_obj2 = (Maquinarias)temp_obj1.getMaquinarias();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                                    break;
                }
            }
                                                                                    
                                                        
                            
              
                           omClass = OperariosPeer.getOMClass();
                          Operarios obj3 = (Operarios)OperariosPeer
                .row2Object( row, offset3, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Incidencias temp_obj1 = (Incidencias)results.get(j);
                Operarios temp_obj3 = (Operarios)temp_obj1.getOperarios();
                if (temp_obj3.getPrimaryKey().equals(obj3.getPrimaryKey()))
                {
                    newObject = false;
                                    break;
                }
            }
                                                                                    
                                                                  
                                                        
                            
              
                           omClass = UejecucionesPeer.getOMClass();
                          Uejecuciones obj4 = (Uejecuciones)UejecucionesPeer
                .row2Object( row, offset4, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Incidencias temp_obj1 = (Incidencias)results.get(j);
                Uejecuciones temp_obj4 = (Uejecuciones)temp_obj1.getUejecuciones();
                if (temp_obj4.getPrimaryKey().equals(obj4.getPrimaryKey()))
                {
                    newObject = false;
                                    break;
                }
            }
                                                                results.add(obj1);
        }
        return results;
    }
        
        
                                  
                

    /**
     * selects a collection of Incidencias objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in IncidenciasPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptUejecuciones(Criteria criteria)
        throws TorqueException
    {
        setDbName(criteria);

        addSelectColumns(criteria);
        int offset2 = numColumns + 1;
                                    
                    MaquinariasPeer.addSelectColumns(criteria);
        int offset3 = offset2 + MaquinariasPeer.numColumns;
                                                                
                    OperariosPeer.addSelectColumns(criteria);
        int offset4 = offset3 + OperariosPeer.numColumns;
                                                                
                    TipoincidenciasPeer.addSelectColumns(criteria);
        int offset5 = offset4 + TipoincidenciasPeer.numColumns;
                                                                
                                                                                                                                                                                                                                                                                
        List rows = BasePeer.doSelect(criteria);
        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record)rows.get(i);

                            Class omClass = IncidenciasPeer.getOMClass();
                    Incidencias obj1 = (Incidencias)IncidenciasPeer
                .row2Object(row, 1, omClass);
                                                
                                                        
                            
              
                           omClass = MaquinariasPeer.getOMClass();
                          Maquinarias obj2 = (Maquinarias)MaquinariasPeer
                .row2Object( row, offset2, omClass);

               boolean  newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Incidencias temp_obj1 = (Incidencias)results.get(j);
                Maquinarias temp_obj2 = (Maquinarias)temp_obj1.getMaquinarias();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                                    break;
                }
            }
                                                                                    
                                                        
                            
              
                           omClass = OperariosPeer.getOMClass();
                          Operarios obj3 = (Operarios)OperariosPeer
                .row2Object( row, offset3, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Incidencias temp_obj1 = (Incidencias)results.get(j);
                Operarios temp_obj3 = (Operarios)temp_obj1.getOperarios();
                if (temp_obj3.getPrimaryKey().equals(obj3.getPrimaryKey()))
                {
                    newObject = false;
                                    break;
                }
            }
                                                                                    
                                                        
                            
              
                           omClass = TipoincidenciasPeer.getOMClass();
                          Tipoincidencias obj4 = (Tipoincidencias)TipoincidenciasPeer
                .row2Object( row, offset4, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Incidencias temp_obj1 = (Incidencias)results.get(j);
                Tipoincidencias temp_obj4 = (Tipoincidencias)temp_obj1.getTipoincidencias();
                if (temp_obj4.getPrimaryKey().equals(obj4.getPrimaryKey()))
                {
                    newObject = false;
                                    break;
                }
            }
                                                                                    
                                              results.add(obj1);
        }
        return results;
    }
                    
  
      /**
     * Returns the TableMap related to this peer.  This method is not
     * needed for general use but a specific application could have a need.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static TableMap getTableMap()
        throws TorqueException
    {
        return Torque.getDatabaseMap(DATABASE_NAME).getTable(TABLE_NAME);
    }
   
    private static void setDbName(Criteria crit)
    {
        // Set the correct dbName if it has not been overridden
        // crit.getDbName will return the same object if not set to
        // another value so == check is okay and faster
        if (crit.getDbName() == Torque.getDefaultDB())
        {
            crit.setDbName(DATABASE_NAME);
        }
    }
}
