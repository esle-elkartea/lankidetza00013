package net.idtoki.aveobras.model;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import net.zylk.tools.ajax.AjaxUtils;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;

  
    
    
    
  
/**
 * This class was autogenerated by Torque on:
 *
 * [Wed Oct 25 17:01:04 CEST 2006]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Incidencias
 */
public abstract class BaseIncidencias extends BaseObject
{
    /** The Peer class */
    private static final IncidenciasPeer peer =
        new IncidenciasPeer();

                                            
    /** The value for the idincidencia field */
    private int idincidencia = -1;
                                          
    /** The value for the iduejecucion field */
    private int iduejecucion = 0;
                                          
    /** The value for the idoperario field */
    private int idoperario = 0;
                                          
    /** The value for the idmaquinaria field */
    private int idmaquinaria = 0;
                                          
    /** The value for the idtipoincidencia field */
    private int idtipoincidencia = 0;
                                                
    /** The value for the fecha field */
    private String fecha = "";
                                                
    /** The value for the referencia field */
    private String referencia = "";
                                                
    /** The value for the descripcion field */
    private String descripcion = "";
                                                
    /** The value for the observaciones field */
    private String observaciones = "";
                                          
    /** The value for the horas field */
    private double horas = 0;
                                          
    /** The value for the importe field */
    private double importe = 0;
                                          
    /** The value for the kilometros field */
    private double kilometros = 0;
                                          
    /** The value for the tonelaje field */
    private double tonelaje = 0;
  
    
    /**
     * Get the Idincidencia
     *
     * @return int
     */
    public int getIdincidencia()
    {
        return idincidencia;
    }

                        
    /**
     * Set the value of Idincidencia
     *
     * @param v new value
     */
    public void setIdincidencia(int v) 
    {
    
                  if (this.idincidencia != v)
              {
            this.idincidencia = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Iduejecucion
     *
     * @return int
     */
    public int getIduejecucion()
    {
        return iduejecucion;
    }

                              
    /**
     * Set the value of Iduejecucion
     *
     * @param v new value
     */
    public void setIduejecucion(int v) throws TorqueException
    {
    
                  if (this.iduejecucion != v)
              {
            this.iduejecucion = v;
            setModified(true);
        }
    
                          
                if (aUejecuciones != null && !(aUejecuciones.getIduejecucion() == v))
                {
            aUejecuciones = null;
        }
      
              }
  
    /**
     * Get the Idoperario
     *
     * @return int
     */
    public int getIdoperario()
    {
        return idoperario;
    }

                              
    /**
     * Set the value of Idoperario
     *
     * @param v new value
     */
    public void setIdoperario(int v) throws TorqueException
    {
    
                  if (this.idoperario != v)
              {
            this.idoperario = v;
            setModified(true);
        }
    
                          
                if (aOperarios != null && !(aOperarios.getIdoperario() == v))
                {
            aOperarios = null;
        }
      
              }
  
    /**
     * Get the Idmaquinaria
     *
     * @return int
     */
    public int getIdmaquinaria()
    {
        return idmaquinaria;
    }

                              
    /**
     * Set the value of Idmaquinaria
     *
     * @param v new value
     */
    public void setIdmaquinaria(int v) throws TorqueException
    {
    
                  if (this.idmaquinaria != v)
              {
            this.idmaquinaria = v;
            setModified(true);
        }
    
                          
                if (aMaquinarias != null && !(aMaquinarias.getIdmaquinaria() == v))
                {
            aMaquinarias = null;
        }
      
              }
  
    /**
     * Get the Idtipoincidencia
     *
     * @return int
     */
    public int getIdtipoincidencia()
    {
        return idtipoincidencia;
    }

                              
    /**
     * Set the value of Idtipoincidencia
     *
     * @param v new value
     */
    public void setIdtipoincidencia(int v) throws TorqueException
    {
    
                  if (this.idtipoincidencia != v)
              {
            this.idtipoincidencia = v;
            setModified(true);
        }
    
                          
                if (aTipoincidencias != null && !(aTipoincidencias.getIdtipoincidencia() == v))
                {
            aTipoincidencias = null;
        }
      
              }
  
    /**
     * Get the Fecha
     *
     * @return String
     */
    public String getFecha()
    {
        return fecha;
    }

                        
    /**
     * Set the value of Fecha
     *
     * @param v new value
     */
    public void setFecha(String v) 
    {
    
                  if (!ObjectUtils.equals(this.fecha, v))
              {
            this.fecha = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Referencia
     *
     * @return String
     */
    public String getReferencia()
    {
        return referencia;
    }

                        
    /**
     * Set the value of Referencia
     *
     * @param v new value
     */
    public void setReferencia(String v) 
    {
    
                  if (!ObjectUtils.equals(this.referencia, v))
              {
            this.referencia = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Descripcion
     *
     * @return String
     */
    public String getDescripcion()
    {
        return descripcion;
    }

                        
    /**
     * Set the value of Descripcion
     *
     * @param v new value
     */
    public void setDescripcion(String v) 
    {
    
                  if (!ObjectUtils.equals(this.descripcion, v))
              {
            this.descripcion = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Observaciones
     *
     * @return String
     */
    public String getObservaciones()
    {
        return observaciones;
    }

                        
    /**
     * Set the value of Observaciones
     *
     * @param v new value
     */
    public void setObservaciones(String v) 
    {
    
                  if (!ObjectUtils.equals(this.observaciones, v))
              {
            this.observaciones = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Horas
     *
     * @return double
     */
    public double getHoras()
    {
        return horas;
    }

                        
    /**
     * Set the value of Horas
     *
     * @param v new value
     */
    public void setHoras(double v) 
    {
    
                  if (this.horas != v)
              {
            this.horas = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Importe
     *
     * @return double
     */
    public double getImporte()
    {
        return importe;
    }

                        
    /**
     * Set the value of Importe
     *
     * @param v new value
     */
    public void setImporte(double v) 
    {
    
                  if (this.importe != v)
              {
            this.importe = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Kilometros
     *
     * @return double
     */
    public double getKilometros()
    {
        return kilometros;
    }

                        
    /**
     * Set the value of Kilometros
     *
     * @param v new value
     */
    public void setKilometros(double v) 
    {
    
                  if (this.kilometros != v)
              {
            this.kilometros = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Tonelaje
     *
     * @return double
     */
    public double getTonelaje()
    {
        return tonelaje;
    }

                        
    /**
     * Set the value of Tonelaje
     *
     * @param v new value
     */
    public void setTonelaje(double v) 
    {
    
                  if (this.tonelaje != v)
              {
            this.tonelaje = v;
            setModified(true);
        }
    
          
              }
  
      
    
                  
    
        private Maquinarias aMaquinarias;

    /**
     * Declares an association between this object and a Maquinarias object
     *
     * @param v Maquinarias
     * @throws TorqueException
     */
    public void setMaquinarias(Maquinarias v) throws TorqueException
    {
            if (v == null)
        {
                          setIdmaquinaria( 0);
              }
        else
        {
            setIdmaquinaria(v.getIdmaquinaria());
        }
            aMaquinarias = v;
    }

                                            
    /**
     * Get the associated Maquinarias object
     *
     * @return the associated Maquinarias object
     * @throws TorqueException
     */
    public Maquinarias getMaquinarias() throws TorqueException
    {
        if (aMaquinarias == null && (this.idmaquinaria != 0))
        {
                          aMaquinarias = MaquinariasPeer.retrieveByPK(SimpleKey.keyFor(this.idmaquinaria));
              
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Maquinarias obj = MaquinariasPeer.retrieveByPK(this.idmaquinaria);
               obj.addIncidenciass(this);
            */
        }
        return aMaquinarias;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
         */
    public void setMaquinariasKey(ObjectKey key) throws TorqueException
    {
      
                        setIdmaquinaria(((NumberKey) key).intValue());
                  }
    
    
                  
    
        private Operarios aOperarios;

    /**
     * Declares an association between this object and a Operarios object
     *
     * @param v Operarios
     * @throws TorqueException
     */
    public void setOperarios(Operarios v) throws TorqueException
    {
            if (v == null)
        {
                          setIdoperario( 0);
              }
        else
        {
            setIdoperario(v.getIdoperario());
        }
            aOperarios = v;
    }

                                            
    /**
     * Get the associated Operarios object
     *
     * @return the associated Operarios object
     * @throws TorqueException
     */
    public Operarios getOperarios() throws TorqueException
    {
        if (aOperarios == null && (this.idoperario != 0))
        {
                          aOperarios = OperariosPeer.retrieveByPK(SimpleKey.keyFor(this.idoperario));
              
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Operarios obj = OperariosPeer.retrieveByPK(this.idoperario);
               obj.addIncidenciass(this);
            */
        }
        return aOperarios;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
         */
    public void setOperariosKey(ObjectKey key) throws TorqueException
    {
      
                        setIdoperario(((NumberKey) key).intValue());
                  }
    
    
                  
    
        private Tipoincidencias aTipoincidencias;

    /**
     * Declares an association between this object and a Tipoincidencias object
     *
     * @param v Tipoincidencias
     * @throws TorqueException
     */
    public void setTipoincidencias(Tipoincidencias v) throws TorqueException
    {
            if (v == null)
        {
                          setIdtipoincidencia( 0);
              }
        else
        {
            setIdtipoincidencia(v.getIdtipoincidencia());
        }
            aTipoincidencias = v;
    }

                                            
    /**
     * Get the associated Tipoincidencias object
     *
     * @return the associated Tipoincidencias object
     * @throws TorqueException
     */
    public Tipoincidencias getTipoincidencias() throws TorqueException
    {
        if (aTipoincidencias == null && (this.idtipoincidencia != 0))
        {
                          aTipoincidencias = TipoincidenciasPeer.retrieveByPK(SimpleKey.keyFor(this.idtipoincidencia));
              
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Tipoincidencias obj = TipoincidenciasPeer.retrieveByPK(this.idtipoincidencia);
               obj.addIncidenciass(this);
            */
        }
        return aTipoincidencias;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
         */
    public void setTipoincidenciasKey(ObjectKey key) throws TorqueException
    {
      
                        setIdtipoincidencia(((NumberKey) key).intValue());
                  }
    
    
                  
    
        private Uejecuciones aUejecuciones;

    /**
     * Declares an association between this object and a Uejecuciones object
     *
     * @param v Uejecuciones
     * @throws TorqueException
     */
    public void setUejecuciones(Uejecuciones v) throws TorqueException
    {
            if (v == null)
        {
                          setIduejecucion( 0);
              }
        else
        {
            setIduejecucion(v.getIduejecucion());
        }
            aUejecuciones = v;
    }

                                            
    /**
     * Get the associated Uejecuciones object
     *
     * @return the associated Uejecuciones object
     * @throws TorqueException
     */
    public Uejecuciones getUejecuciones() throws TorqueException
    {
        if (aUejecuciones == null && (this.iduejecucion != 0))
        {
                          aUejecuciones = UejecucionesPeer.retrieveByPK(SimpleKey.keyFor(this.iduejecucion));
              
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Uejecuciones obj = UejecucionesPeer.retrieveByPK(this.iduejecucion);
               obj.addIncidenciass(this);
            */
        }
        return aUejecuciones;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
         */
    public void setUejecucionesKey(ObjectKey key) throws TorqueException
    {
      
                        setIduejecucion(((NumberKey) key).intValue());
                  }
       
                
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
              fieldNames.add("Idincidencia");
              fieldNames.add("Iduejecucion");
              fieldNames.add("Idoperario");
              fieldNames.add("Idmaquinaria");
              fieldNames.add("Idtipoincidencia");
              fieldNames.add("Fecha");
              fieldNames.add("Referencia");
              fieldNames.add("Descripcion");
              fieldNames.add("Observaciones");
              fieldNames.add("Horas");
              fieldNames.add("Importe");
              fieldNames.add("Kilometros");
              fieldNames.add("Tonelaje");
              fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
          if (name.equals("Idincidencia"))
        {
                return new Integer(getIdincidencia());
            }
          if (name.equals("Iduejecucion"))
        {
                return new Integer(getIduejecucion());
            }
          if (name.equals("Idoperario"))
        {
                return new Integer(getIdoperario());
            }
          if (name.equals("Idmaquinaria"))
        {
                return new Integer(getIdmaquinaria());
            }
          if (name.equals("Idtipoincidencia"))
        {
                return new Integer(getIdtipoincidencia());
            }
          if (name.equals("Fecha"))
        {
                return getFecha();
            }
          if (name.equals("Referencia"))
        {
                return getReferencia();
            }
          if (name.equals("Descripcion"))
        {
                return getDescripcion();
            }
          if (name.equals("Observaciones"))
        {
                return getObservaciones();
            }
          if (name.equals("Horas"))
        {
                return new Double(getHoras());
            }
          if (name.equals("Importe"))
        {
                return new Double(getImporte());
            }
          if (name.equals("Kilometros"))
        {
                return new Double(getKilometros());
            }
          if (name.equals("Tonelaje"))
        {
                return new Double(getTonelaje());
            }
          return null;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
          if (name.equals(IncidenciasPeer.IDINCIDENCIA))
        {
                return new Integer(getIdincidencia());
            }
          if (name.equals(IncidenciasPeer.IDUEJECUCION))
        {
                return new Integer(getIduejecucion());
            }
          if (name.equals(IncidenciasPeer.IDOPERARIO))
        {
                return new Integer(getIdoperario());
            }
          if (name.equals(IncidenciasPeer.IDMAQUINARIA))
        {
                return new Integer(getIdmaquinaria());
            }
          if (name.equals(IncidenciasPeer.IDTIPOINCIDENCIA))
        {
                return new Integer(getIdtipoincidencia());
            }
          if (name.equals(IncidenciasPeer.FECHA))
        {
                return getFecha();
            }
          if (name.equals(IncidenciasPeer.REFERENCIA))
        {
                return getReferencia();
            }
          if (name.equals(IncidenciasPeer.DESCRIPCION))
        {
                return getDescripcion();
            }
          if (name.equals(IncidenciasPeer.OBSERVACIONES))
        {
                return getObservaciones();
            }
          if (name.equals(IncidenciasPeer.HORAS))
        {
                return new Double(getHoras());
            }
          if (name.equals(IncidenciasPeer.IMPORTE))
        {
                return new Double(getImporte());
            }
          if (name.equals(IncidenciasPeer.KILOMETROS))
        {
                return new Double(getKilometros());
            }
          if (name.equals(IncidenciasPeer.TONELAJE))
        {
                return new Double(getTonelaje());
            }
          return null;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
            if (pos == 0)
        {
                return new Integer(getIdincidencia());
            }
              if (pos == 1)
        {
                return new Integer(getIduejecucion());
            }
              if (pos == 2)
        {
                return new Integer(getIdoperario());
            }
              if (pos == 3)
        {
                return new Integer(getIdmaquinaria());
            }
              if (pos == 4)
        {
                return new Integer(getIdtipoincidencia());
            }
              if (pos == 5)
        {
                return getFecha();
            }
              if (pos == 6)
        {
                return getReferencia();
            }
              if (pos == 7)
        {
                return getDescripcion();
            }
              if (pos == 8)
        {
                return getObservaciones();
            }
              if (pos == 9)
        {
                return new Double(getHoras());
            }
              if (pos == 10)
        {
                return new Double(getImporte());
            }
              if (pos == 11)
        {
                return new Double(getKilometros());
            }
              if (pos == 12)
        {
                return new Double(getTonelaje());
            }
              return null;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
          save(IncidenciasPeer.getMapBuilder()
                .getDatabaseMap().getName());
      }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
       * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
       *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
          try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
      }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
          if (!alreadyInSave)
        {
            alreadyInSave = true;


  
            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    IncidenciasPeer.doInsert((Incidencias) this, con);
                    setNew(false);
                }
                else
                {
                    IncidenciasPeer.doUpdate((Incidencias) this, con);
                }
            }

                      alreadyInSave = false;
        }
      }

                  
      /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param key idincidencia ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        
    {
            setIdincidencia(((NumberKey) key).intValue());
        }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) 
    {
            setIdincidencia(Integer.parseInt(key));
        }

  
    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
          return SimpleKey.keyFor(getIdincidencia());
      }
 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
       * It then fills all the association collections and sets the
     * related objects to isNew=true.
       */
      public Incidencias copy() throws TorqueException
    {
        return copyInto(new Incidencias());
    }
  
    protected Incidencias copyInto(Incidencias copyObj) throws TorqueException
    {
          copyObj.setIdincidencia(idincidencia);
          copyObj.setIduejecucion(iduejecucion);
          copyObj.setIdoperario(idoperario);
          copyObj.setIdmaquinaria(idmaquinaria);
          copyObj.setIdtipoincidencia(idtipoincidencia);
          copyObj.setFecha(fecha);
          copyObj.setReferencia(referencia);
          copyObj.setDescripcion(descripcion);
          copyObj.setObservaciones(observaciones);
          copyObj.setHoras(horas);
          copyObj.setImporte(importe);
          copyObj.setKilometros(kilometros);
          copyObj.setTonelaje(tonelaje);
  
                            copyObj.setIdincidencia( -1);
                                                                                    
                return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public IncidenciasPeer getPeer()
    {
        return peer;
    }

    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("Incidencias:\n");
        str.append("Idincidencia = ")
               .append(getIdincidencia())
             .append("\n");
        str.append("Iduejecucion = ")
               .append(getIduejecucion())
             .append("\n");
        str.append("Idoperario = ")
               .append(getIdoperario())
             .append("\n");
        str.append("Idmaquinaria = ")
               .append(getIdmaquinaria())
             .append("\n");
        str.append("Idtipoincidencia = ")
               .append(getIdtipoincidencia())
             .append("\n");
        str.append("Fecha = ")
               .append(getFecha())
             .append("\n");
        str.append("Referencia = ")
               .append(getReferencia())
             .append("\n");
        str.append("Descripcion = ")
               .append(getDescripcion())
             .append("\n");
        str.append("Observaciones = ")
               .append(getObservaciones())
             .append("\n");
        str.append("Horas = ")
               .append(getHoras())
             .append("\n");
        str.append("Importe = ")
               .append(getImporte())
             .append("\n");
        str.append("Kilometros = ")
               .append(getKilometros())
             .append("\n");
        str.append("Tonelaje = ")
               .append(getTonelaje())
             .append("\n");
        return(str.toString());
    }
    public String getComplexId()
    {
    ArrayList a = new ArrayList();
      	          a.add(Integer.toString(this.getIdincidencia()));
                return  AjaxUtils.concatenateIdFields(a);
    }
}
