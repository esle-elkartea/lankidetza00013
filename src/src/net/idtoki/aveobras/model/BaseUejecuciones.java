package net.idtoki.aveobras.model;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import net.zylk.tools.ajax.AjaxUtils;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;

  
    
  
/**
 * This class was autogenerated by Torque on:
 *
 * [Wed Oct 25 17:01:04 CEST 2006]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Uejecuciones
 */
public abstract class BaseUejecuciones extends BaseObject
{
    /** The Peer class */
    private static final UejecucionesPeer peer =
        new UejecucionesPeer();

                                            
    /** The value for the iduejecucion field */
    private int iduejecucion = -1;
                                          
    /** The value for the idobra field */
    private int idobra = 0;
                                          
    /** The value for the idsubcapitulo field */
    private int idsubcapitulo = 0;
                                                
    /** The value for the fechacomienzo field */
    private String fechacomienzo = "";
                                                
    /** The value for the fechafin field */
    private String fechafin = "";
                                          
    /** The value for the horasestimadas field */
    private double horasestimadas = 0;
                                                
    /** The value for the referencia field */
    private String referencia = "";
                                                
    /** The value for the descripcion field */
    private String descripcion = "";
                                                
    /** The value for the observaciones field */
    private String observaciones = "";
                                          
    /** The value for the importe field */
    private double importe = 0;
  
    
    /**
     * Get the Iduejecucion
     *
     * @return int
     */
    public int getIduejecucion()
    {
        return iduejecucion;
    }

                                              
    /**
     * Set the value of Iduejecucion
     *
     * @param v new value
     */
    public void setIduejecucion(int v) throws TorqueException
    {
    
                  if (this.iduejecucion != v)
              {
            this.iduejecucion = v;
            setModified(true);
        }
    
          
                                  
                                                    
                                }
  
    /**
     * Get the Idobra
     *
     * @return int
     */
    public int getIdobra()
    {
        return idobra;
    }

                              
    /**
     * Set the value of Idobra
     *
     * @param v new value
     */
    public void setIdobra(int v) throws TorqueException
    {
    
                  if (this.idobra != v)
              {
            this.idobra = v;
            setModified(true);
        }
    
                          
                if (aObras != null && !(aObras.getIdobra() == v))
                {
            aObras = null;
        }
      
              }
  
    /**
     * Get the Idsubcapitulo
     *
     * @return int
     */
    public int getIdsubcapitulo()
    {
        return idsubcapitulo;
    }

                              
    /**
     * Set the value of Idsubcapitulo
     *
     * @param v new value
     */
    public void setIdsubcapitulo(int v) throws TorqueException
    {
    
                  if (this.idsubcapitulo != v)
              {
            this.idsubcapitulo = v;
            setModified(true);
        }
    
                          
                if (aSubcapitulos != null && !(aSubcapitulos.getIdsubcapitulo() == v))
                {
            aSubcapitulos = null;
        }
      
              }
  
    /**
     * Get the Fechacomienzo
     *
     * @return String
     */
    public String getFechacomienzo()
    {
        return fechacomienzo;
    }

                        
    /**
     * Set the value of Fechacomienzo
     *
     * @param v new value
     */
    public void setFechacomienzo(String v) 
    {
    
                  if (!ObjectUtils.equals(this.fechacomienzo, v))
              {
            this.fechacomienzo = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Fechafin
     *
     * @return String
     */
    public String getFechafin()
    {
        return fechafin;
    }

                        
    /**
     * Set the value of Fechafin
     *
     * @param v new value
     */
    public void setFechafin(String v) 
    {
    
                  if (!ObjectUtils.equals(this.fechafin, v))
              {
            this.fechafin = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Horasestimadas
     *
     * @return double
     */
    public double getHorasestimadas()
    {
        return horasestimadas;
    }

                        
    /**
     * Set the value of Horasestimadas
     *
     * @param v new value
     */
    public void setHorasestimadas(double v) 
    {
    
                  if (this.horasestimadas != v)
              {
            this.horasestimadas = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Referencia
     *
     * @return String
     */
    public String getReferencia()
    {
        return referencia;
    }

                        
    /**
     * Set the value of Referencia
     *
     * @param v new value
     */
    public void setReferencia(String v) 
    {
    
                  if (!ObjectUtils.equals(this.referencia, v))
              {
            this.referencia = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Descripcion
     *
     * @return String
     */
    public String getDescripcion()
    {
        return descripcion;
    }

                        
    /**
     * Set the value of Descripcion
     *
     * @param v new value
     */
    public void setDescripcion(String v) 
    {
    
                  if (!ObjectUtils.equals(this.descripcion, v))
              {
            this.descripcion = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Observaciones
     *
     * @return String
     */
    public String getObservaciones()
    {
        return observaciones;
    }

                        
    /**
     * Set the value of Observaciones
     *
     * @param v new value
     */
    public void setObservaciones(String v) 
    {
    
                  if (!ObjectUtils.equals(this.observaciones, v))
              {
            this.observaciones = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Importe
     *
     * @return double
     */
    public double getImporte()
    {
        return importe;
    }

                        
    /**
     * Set the value of Importe
     *
     * @param v new value
     */
    public void setImporte(double v) 
    {
    
                  if (this.importe != v)
              {
            this.importe = v;
            setModified(true);
        }
    
          
              }
  
      
    
                  
    
        private Obras aObras;

    /**
     * Declares an association between this object and a Obras object
     *
     * @param v Obras
     * @throws TorqueException
     */
    public void setObras(Obras v) throws TorqueException
    {
            if (v == null)
        {
                          setIdobra( 0);
              }
        else
        {
            setIdobra(v.getIdobra());
        }
            aObras = v;
    }

                                            
    /**
     * Get the associated Obras object
     *
     * @return the associated Obras object
     * @throws TorqueException
     */
    public Obras getObras() throws TorqueException
    {
        if (aObras == null && (this.idobra != 0))
        {
                          aObras = ObrasPeer.retrieveByPK(SimpleKey.keyFor(this.idobra));
              
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Obras obj = ObrasPeer.retrieveByPK(this.idobra);
               obj.addUejecucioness(this);
            */
        }
        return aObras;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
         */
    public void setObrasKey(ObjectKey key) throws TorqueException
    {
      
                        setIdobra(((NumberKey) key).intValue());
                  }
    
    
                  
    
        private Subcapitulos aSubcapitulos;

    /**
     * Declares an association between this object and a Subcapitulos object
     *
     * @param v Subcapitulos
     * @throws TorqueException
     */
    public void setSubcapitulos(Subcapitulos v) throws TorqueException
    {
            if (v == null)
        {
                          setIdsubcapitulo( 0);
              }
        else
        {
            setIdsubcapitulo(v.getIdsubcapitulo());
        }
            aSubcapitulos = v;
    }

                                            
    /**
     * Get the associated Subcapitulos object
     *
     * @return the associated Subcapitulos object
     * @throws TorqueException
     */
    public Subcapitulos getSubcapitulos() throws TorqueException
    {
        if (aSubcapitulos == null && (this.idsubcapitulo != 0))
        {
                          aSubcapitulos = SubcapitulosPeer.retrieveByPK(SimpleKey.keyFor(this.idsubcapitulo));
              
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Subcapitulos obj = SubcapitulosPeer.retrieveByPK(this.idsubcapitulo);
               obj.addUejecucioness(this);
            */
        }
        return aSubcapitulos;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
         */
    public void setSubcapitulosKey(ObjectKey key) throws TorqueException
    {
      
                        setIdsubcapitulo(((NumberKey) key).intValue());
                  }
       
                                
            
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getIncidenciass(new Criteria())
     *
     * @throws TorqueException
     */
    public List getIncidenciass() throws TorqueException
    {
                  return getIncidenciass(new Criteria(10));
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Uejecuciones has previously
     * been saved, it will retrieve related Incidenciass from storage.
     * If this Uejecuciones is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getIncidenciass(Criteria criteria) throws TorqueException
    {
                            criteria.add(IncidenciasPeer.IDUEJECUCION, getIduejecucion());
                            return IncidenciasPeer.doSelect(criteria);
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getIncidenciass(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getIncidenciass(Connection con) throws TorqueException
    {
                  return getIncidenciass(new Criteria(10), con);
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Uejecuciones has previously
     * been saved, it will retrieve related Incidenciass from storage.
     * If this Uejecuciones is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getIncidenciass(Criteria criteria, Connection con)
            throws TorqueException
    {
                             criteria.add(IncidenciasPeer.IDUEJECUCION, getIduejecucion());
                             return IncidenciasPeer.doSelect(criteria, con);
           }

                                    
              
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Uejecuciones is new, it will return
     * an empty collection; or if this Uejecuciones has previously
     * been saved, it will retrieve related Incidenciass from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Uejecuciones.
     */
    protected List getIncidenciassJoinMaquinarias(Criteria criteria)
        throws TorqueException
    {
            
                        criteria.add(IncidenciasPeer.IDUEJECUCION, getIduejecucion());
                                    return IncidenciasPeer.doSelectJoinMaquinarias(criteria);
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Uejecuciones is new, it will return
     * an empty collection; or if this Uejecuciones has previously
     * been saved, it will retrieve related Incidenciass from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Uejecuciones.
     */
    protected List getIncidenciassJoinOperarios(Criteria criteria)
        throws TorqueException
    {
            
                        criteria.add(IncidenciasPeer.IDUEJECUCION, getIduejecucion());
                                    return IncidenciasPeer.doSelectJoinOperarios(criteria);
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Uejecuciones is new, it will return
     * an empty collection; or if this Uejecuciones has previously
     * been saved, it will retrieve related Incidenciass from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Uejecuciones.
     */
    protected List getIncidenciassJoinTipoincidencias(Criteria criteria)
        throws TorqueException
    {
            
                        criteria.add(IncidenciasPeer.IDUEJECUCION, getIduejecucion());
                                    return IncidenciasPeer.doSelectJoinTipoincidencias(criteria);
                }
                  
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Uejecuciones is new, it will return
     * an empty collection; or if this Uejecuciones has previously
     * been saved, it will retrieve related Incidenciass from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Uejecuciones.
     */
    protected List getIncidenciassJoinUejecuciones(Criteria criteria)
        throws TorqueException
    {
            
                        criteria.add(IncidenciasPeer.IDUEJECUCION, getIduejecucion());
                                    return IncidenciasPeer.doSelectJoinUejecuciones(criteria);
                }
                            


                          
            
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getPartess(new Criteria())
     *
     * @throws TorqueException
     */
    public List getPartess() throws TorqueException
    {
                  return getPartess(new Criteria(10));
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Uejecuciones has previously
     * been saved, it will retrieve related Partess from storage.
     * If this Uejecuciones is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getPartess(Criteria criteria) throws TorqueException
    {
                            criteria.add(PartesPeer.IDUEJECUCION, getIduejecucion());
                            return PartesPeer.doSelect(criteria);
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getPartess(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getPartess(Connection con) throws TorqueException
    {
                  return getPartess(new Criteria(10), con);
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Uejecuciones has previously
     * been saved, it will retrieve related Partess from storage.
     * If this Uejecuciones is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getPartess(Criteria criteria, Connection con)
            throws TorqueException
    {
                             criteria.add(PartesPeer.IDUEJECUCION, getIduejecucion());
                             return PartesPeer.doSelect(criteria, con);
           }

                              
              
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Uejecuciones is new, it will return
     * an empty collection; or if this Uejecuciones has previously
     * been saved, it will retrieve related Partess from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Uejecuciones.
     */
    protected List getPartessJoinMaquinarias(Criteria criteria)
        throws TorqueException
    {
            
                        criteria.add(PartesPeer.IDUEJECUCION, getIduejecucion());
                                    return PartesPeer.doSelectJoinMaquinarias(criteria);
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Uejecuciones is new, it will return
     * an empty collection; or if this Uejecuciones has previously
     * been saved, it will retrieve related Partess from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Uejecuciones.
     */
    protected List getPartessJoinOperarios(Criteria criteria)
        throws TorqueException
    {
            
                        criteria.add(PartesPeer.IDUEJECUCION, getIduejecucion());
                                    return PartesPeer.doSelectJoinOperarios(criteria);
                }
                  
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Uejecuciones is new, it will return
     * an empty collection; or if this Uejecuciones has previously
     * been saved, it will retrieve related Partess from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Uejecuciones.
     */
    protected List getPartessJoinUejecuciones(Criteria criteria)
        throws TorqueException
    {
            
                        criteria.add(PartesPeer.IDUEJECUCION, getIduejecucion());
                                    return PartesPeer.doSelectJoinUejecuciones(criteria);
                }
                            


          
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
              fieldNames.add("Iduejecucion");
              fieldNames.add("Idobra");
              fieldNames.add("Idsubcapitulo");
              fieldNames.add("Fechacomienzo");
              fieldNames.add("Fechafin");
              fieldNames.add("Horasestimadas");
              fieldNames.add("Referencia");
              fieldNames.add("Descripcion");
              fieldNames.add("Observaciones");
              fieldNames.add("Importe");
              fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
          if (name.equals("Iduejecucion"))
        {
                return new Integer(getIduejecucion());
            }
          if (name.equals("Idobra"))
        {
                return new Integer(getIdobra());
            }
          if (name.equals("Idsubcapitulo"))
        {
                return new Integer(getIdsubcapitulo());
            }
          if (name.equals("Fechacomienzo"))
        {
                return getFechacomienzo();
            }
          if (name.equals("Fechafin"))
        {
                return getFechafin();
            }
          if (name.equals("Horasestimadas"))
        {
                return new Double(getHorasestimadas());
            }
          if (name.equals("Referencia"))
        {
                return getReferencia();
            }
          if (name.equals("Descripcion"))
        {
                return getDescripcion();
            }
          if (name.equals("Observaciones"))
        {
                return getObservaciones();
            }
          if (name.equals("Importe"))
        {
                return new Double(getImporte());
            }
          return null;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
          if (name.equals(UejecucionesPeer.IDUEJECUCION))
        {
                return new Integer(getIduejecucion());
            }
          if (name.equals(UejecucionesPeer.IDOBRA))
        {
                return new Integer(getIdobra());
            }
          if (name.equals(UejecucionesPeer.IDSUBCAPITULO))
        {
                return new Integer(getIdsubcapitulo());
            }
          if (name.equals(UejecucionesPeer.FECHACOMIENZO))
        {
                return getFechacomienzo();
            }
          if (name.equals(UejecucionesPeer.FECHAFIN))
        {
                return getFechafin();
            }
          if (name.equals(UejecucionesPeer.HORASESTIMADAS))
        {
                return new Double(getHorasestimadas());
            }
          if (name.equals(UejecucionesPeer.REFERENCIA))
        {
                return getReferencia();
            }
          if (name.equals(UejecucionesPeer.DESCRIPCION))
        {
                return getDescripcion();
            }
          if (name.equals(UejecucionesPeer.OBSERVACIONES))
        {
                return getObservaciones();
            }
          if (name.equals(UejecucionesPeer.IMPORTE))
        {
                return new Double(getImporte());
            }
          return null;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
            if (pos == 0)
        {
                return new Integer(getIduejecucion());
            }
              if (pos == 1)
        {
                return new Integer(getIdobra());
            }
              if (pos == 2)
        {
                return new Integer(getIdsubcapitulo());
            }
              if (pos == 3)
        {
                return getFechacomienzo();
            }
              if (pos == 4)
        {
                return getFechafin();
            }
              if (pos == 5)
        {
                return new Double(getHorasestimadas());
            }
              if (pos == 6)
        {
                return getReferencia();
            }
              if (pos == 7)
        {
                return getDescripcion();
            }
              if (pos == 8)
        {
                return getObservaciones();
            }
              if (pos == 9)
        {
                return new Double(getImporte());
            }
              return null;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
          save(UejecucionesPeer.getMapBuilder()
                .getDatabaseMap().getName());
      }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
       * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
       *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
          try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
      }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
          if (!alreadyInSave)
        {
            alreadyInSave = true;


  
            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    UejecucionesPeer.doInsert((Uejecuciones) this, con);
                    setNew(false);
                }
                else
                {
                    UejecucionesPeer.doUpdate((Uejecuciones) this, con);
                }
            }

                                      
                
                                                  
                
                                  alreadyInSave = false;
        }
      }

                        
      /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param key iduejecucion ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        throws TorqueException
    {
            setIduejecucion(((NumberKey) key).intValue());
        }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
            setIduejecucion(Integer.parseInt(key));
        }

  
    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
          return SimpleKey.keyFor(getIduejecucion());
      }
 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
       * It then fills all the association collections and sets the
     * related objects to isNew=true.
       */
      public Uejecuciones copy() throws TorqueException
    {
        return copyInto(new Uejecuciones());
    }
  
    protected Uejecuciones copyInto(Uejecuciones copyObj) throws TorqueException
    {
          copyObj.setIduejecucion(iduejecucion);
          copyObj.setIdobra(idobra);
          copyObj.setIdsubcapitulo(idsubcapitulo);
          copyObj.setFechacomienzo(fechacomienzo);
          copyObj.setFechafin(fechafin);
          copyObj.setHorasestimadas(horasestimadas);
          copyObj.setReferencia(referencia);
          copyObj.setDescripcion(descripcion);
          copyObj.setObservaciones(observaciones);
          copyObj.setImporte(importe);
  
                            copyObj.setIduejecucion( -1);
                                                                  
                                      
                                                  
                            return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public UejecucionesPeer getPeer()
    {
        return peer;
    }

    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("Uejecuciones:\n");
        str.append("Iduejecucion = ")
               .append(getIduejecucion())
             .append("\n");
        str.append("Idobra = ")
               .append(getIdobra())
             .append("\n");
        str.append("Idsubcapitulo = ")
               .append(getIdsubcapitulo())
             .append("\n");
        str.append("Fechacomienzo = ")
               .append(getFechacomienzo())
             .append("\n");
        str.append("Fechafin = ")
               .append(getFechafin())
             .append("\n");
        str.append("Horasestimadas = ")
               .append(getHorasestimadas())
             .append("\n");
        str.append("Referencia = ")
               .append(getReferencia())
             .append("\n");
        str.append("Descripcion = ")
               .append(getDescripcion())
             .append("\n");
        str.append("Observaciones = ")
               .append(getObservaciones())
             .append("\n");
        str.append("Importe = ")
               .append(getImporte())
             .append("\n");
        return(str.toString());
    }
    public String getComplexId()
    {
    ArrayList a = new ArrayList();
      	          a.add(Integer.toString(this.getIduejecucion()));
                return  AjaxUtils.concatenateIdFields(a);
    }
}
