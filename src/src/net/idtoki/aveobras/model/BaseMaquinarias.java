package net.idtoki.aveobras.model;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import net.zylk.tools.ajax.AjaxUtils;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;


/**
 * This class was autogenerated by Torque on:
 *
 * [Wed Oct 25 17:01:04 CEST 2006]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Maquinarias
 */
public abstract class BaseMaquinarias extends BaseObject
{
    /** The Peer class */
    private static final MaquinariasPeer peer =
        new MaquinariasPeer();

                                            
    /** The value for the idmaquinaria field */
    private int idmaquinaria = -1;
                                                
    /** The value for the nombre field */
    private String nombre = "";
                                                
    /** The value for the referencia field */
    private String referencia = "";
                                                
    /** The value for the bastidor field */
    private String bastidor = "";
                                                
    /** The value for the matricula field */
    private String matricula = "";
                                                
    /** The value for the fechaalta field */
    private String fechaalta = "";
                                                
    /** The value for the fechabaja field */
    private String fechabaja = "";
                                                
    /** The value for the responsable field */
    private String responsable = "";
                                          
    /** The value for the coste field */
    private double coste = 0;
                                                
    /** The value for the modelo field */
    private String modelo = "";
                                                
    /** The value for the marca field */
    private String marca = "";
                                                
    /** The value for the tipo field */
    private String tipo = "";
                                          
    /** The value for the alquilado field */
    private int alquilado = 0;
                                                
    /** The value for the observaciones field */
    private String observaciones = "";
  
    
    /**
     * Get the Idmaquinaria
     *
     * @return int
     */
    public int getIdmaquinaria()
    {
        return idmaquinaria;
    }

                                              
    /**
     * Set the value of Idmaquinaria
     *
     * @param v new value
     */
    public void setIdmaquinaria(int v) throws TorqueException
    {
    
                  if (this.idmaquinaria != v)
              {
            this.idmaquinaria = v;
            setModified(true);
        }
    
          
                                  
                                                    
                                }
  
    /**
     * Get the Nombre
     *
     * @return String
     */
    public String getNombre()
    {
        return nombre;
    }

                        
    /**
     * Set the value of Nombre
     *
     * @param v new value
     */
    public void setNombre(String v) 
    {
    
                  if (!ObjectUtils.equals(this.nombre, v))
              {
            this.nombre = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Referencia
     *
     * @return String
     */
    public String getReferencia()
    {
        return referencia;
    }

                        
    /**
     * Set the value of Referencia
     *
     * @param v new value
     */
    public void setReferencia(String v) 
    {
    
                  if (!ObjectUtils.equals(this.referencia, v))
              {
            this.referencia = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Bastidor
     *
     * @return String
     */
    public String getBastidor()
    {
        return bastidor;
    }

                        
    /**
     * Set the value of Bastidor
     *
     * @param v new value
     */
    public void setBastidor(String v) 
    {
    
                  if (!ObjectUtils.equals(this.bastidor, v))
              {
            this.bastidor = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Matricula
     *
     * @return String
     */
    public String getMatricula()
    {
        return matricula;
    }

                        
    /**
     * Set the value of Matricula
     *
     * @param v new value
     */
    public void setMatricula(String v) 
    {
    
                  if (!ObjectUtils.equals(this.matricula, v))
              {
            this.matricula = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Fechaalta
     *
     * @return String
     */
    public String getFechaalta()
    {
        return fechaalta;
    }

                        
    /**
     * Set the value of Fechaalta
     *
     * @param v new value
     */
    public void setFechaalta(String v) 
    {
    
                  if (!ObjectUtils.equals(this.fechaalta, v))
              {
            this.fechaalta = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Fechabaja
     *
     * @return String
     */
    public String getFechabaja()
    {
        return fechabaja;
    }

                        
    /**
     * Set the value of Fechabaja
     *
     * @param v new value
     */
    public void setFechabaja(String v) 
    {
    
                  if (!ObjectUtils.equals(this.fechabaja, v))
              {
            this.fechabaja = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Responsable
     *
     * @return String
     */
    public String getResponsable()
    {
        return responsable;
    }

                        
    /**
     * Set the value of Responsable
     *
     * @param v new value
     */
    public void setResponsable(String v) 
    {
    
                  if (!ObjectUtils.equals(this.responsable, v))
              {
            this.responsable = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Coste
     *
     * @return double
     */
    public double getCoste()
    {
        return coste;
    }

                        
    /**
     * Set the value of Coste
     *
     * @param v new value
     */
    public void setCoste(double v) 
    {
    
                  if (this.coste != v)
              {
            this.coste = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Modelo
     *
     * @return String
     */
    public String getModelo()
    {
        return modelo;
    }

                        
    /**
     * Set the value of Modelo
     *
     * @param v new value
     */
    public void setModelo(String v) 
    {
    
                  if (!ObjectUtils.equals(this.modelo, v))
              {
            this.modelo = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Marca
     *
     * @return String
     */
    public String getMarca()
    {
        return marca;
    }

                        
    /**
     * Set the value of Marca
     *
     * @param v new value
     */
    public void setMarca(String v) 
    {
    
                  if (!ObjectUtils.equals(this.marca, v))
              {
            this.marca = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Tipo
     *
     * @return String
     */
    public String getTipo()
    {
        return tipo;
    }

                        
    /**
     * Set the value of Tipo
     *
     * @param v new value
     */
    public void setTipo(String v) 
    {
    
                  if (!ObjectUtils.equals(this.tipo, v))
              {
            this.tipo = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Alquilado
     *
     * @return int
     */
    public int getAlquilado()
    {
        return alquilado;
    }

                        
    /**
     * Set the value of Alquilado
     *
     * @param v new value
     */
    public void setAlquilado(int v) 
    {
    
                  if (this.alquilado != v)
              {
            this.alquilado = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Observaciones
     *
     * @return String
     */
    public String getObservaciones()
    {
        return observaciones;
    }

                        
    /**
     * Set the value of Observaciones
     *
     * @param v new value
     */
    public void setObservaciones(String v) 
    {
    
                  if (!ObjectUtils.equals(this.observaciones, v))
              {
            this.observaciones = v;
            setModified(true);
        }
    
          
              }
  
         
                                
            
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getIncidenciass(new Criteria())
     *
     * @throws TorqueException
     */
    public List getIncidenciass() throws TorqueException
    {
                  return getIncidenciass(new Criteria(10));
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Maquinarias has previously
     * been saved, it will retrieve related Incidenciass from storage.
     * If this Maquinarias is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getIncidenciass(Criteria criteria) throws TorqueException
    {
                            criteria.add(IncidenciasPeer.IDMAQUINARIA, getIdmaquinaria());
                            return IncidenciasPeer.doSelect(criteria);
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getIncidenciass(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getIncidenciass(Connection con) throws TorqueException
    {
                  return getIncidenciass(new Criteria(10), con);
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Maquinarias has previously
     * been saved, it will retrieve related Incidenciass from storage.
     * If this Maquinarias is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getIncidenciass(Criteria criteria, Connection con)
            throws TorqueException
    {
                             criteria.add(IncidenciasPeer.IDMAQUINARIA, getIdmaquinaria());
                             return IncidenciasPeer.doSelect(criteria, con);
           }

                                    
              
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Maquinarias is new, it will return
     * an empty collection; or if this Maquinarias has previously
     * been saved, it will retrieve related Incidenciass from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Maquinarias.
     */
    protected List getIncidenciassJoinMaquinarias(Criteria criteria)
        throws TorqueException
    {
            
                        criteria.add(IncidenciasPeer.IDMAQUINARIA, getIdmaquinaria());
                                    return IncidenciasPeer.doSelectJoinMaquinarias(criteria);
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Maquinarias is new, it will return
     * an empty collection; or if this Maquinarias has previously
     * been saved, it will retrieve related Incidenciass from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Maquinarias.
     */
    protected List getIncidenciassJoinOperarios(Criteria criteria)
        throws TorqueException
    {
            
                        criteria.add(IncidenciasPeer.IDMAQUINARIA, getIdmaquinaria());
                                    return IncidenciasPeer.doSelectJoinOperarios(criteria);
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Maquinarias is new, it will return
     * an empty collection; or if this Maquinarias has previously
     * been saved, it will retrieve related Incidenciass from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Maquinarias.
     */
    protected List getIncidenciassJoinTipoincidencias(Criteria criteria)
        throws TorqueException
    {
            
                        criteria.add(IncidenciasPeer.IDMAQUINARIA, getIdmaquinaria());
                                    return IncidenciasPeer.doSelectJoinTipoincidencias(criteria);
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Maquinarias is new, it will return
     * an empty collection; or if this Maquinarias has previously
     * been saved, it will retrieve related Incidenciass from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Maquinarias.
     */
    protected List getIncidenciassJoinUejecuciones(Criteria criteria)
        throws TorqueException
    {
            
                        criteria.add(IncidenciasPeer.IDMAQUINARIA, getIdmaquinaria());
                                    return IncidenciasPeer.doSelectJoinUejecuciones(criteria);
                }
                            


                          
            
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getPartess(new Criteria())
     *
     * @throws TorqueException
     */
    public List getPartess() throws TorqueException
    {
                  return getPartess(new Criteria(10));
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Maquinarias has previously
     * been saved, it will retrieve related Partess from storage.
     * If this Maquinarias is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getPartess(Criteria criteria) throws TorqueException
    {
                            criteria.add(PartesPeer.IDMAQUINARIA, getIdmaquinaria());
                            return PartesPeer.doSelect(criteria);
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getPartess(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getPartess(Connection con) throws TorqueException
    {
                  return getPartess(new Criteria(10), con);
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Maquinarias has previously
     * been saved, it will retrieve related Partess from storage.
     * If this Maquinarias is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getPartess(Criteria criteria, Connection con)
            throws TorqueException
    {
                             criteria.add(PartesPeer.IDMAQUINARIA, getIdmaquinaria());
                             return PartesPeer.doSelect(criteria, con);
           }

                              
              
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Maquinarias is new, it will return
     * an empty collection; or if this Maquinarias has previously
     * been saved, it will retrieve related Partess from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Maquinarias.
     */
    protected List getPartessJoinMaquinarias(Criteria criteria)
        throws TorqueException
    {
            
                        criteria.add(PartesPeer.IDMAQUINARIA, getIdmaquinaria());
                                    return PartesPeer.doSelectJoinMaquinarias(criteria);
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Maquinarias is new, it will return
     * an empty collection; or if this Maquinarias has previously
     * been saved, it will retrieve related Partess from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Maquinarias.
     */
    protected List getPartessJoinOperarios(Criteria criteria)
        throws TorqueException
    {
            
                        criteria.add(PartesPeer.IDMAQUINARIA, getIdmaquinaria());
                                    return PartesPeer.doSelectJoinOperarios(criteria);
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Maquinarias is new, it will return
     * an empty collection; or if this Maquinarias has previously
     * been saved, it will retrieve related Partess from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Maquinarias.
     */
    protected List getPartessJoinUejecuciones(Criteria criteria)
        throws TorqueException
    {
            
                        criteria.add(PartesPeer.IDMAQUINARIA, getIdmaquinaria());
                                    return PartesPeer.doSelectJoinUejecuciones(criteria);
                }
                            


          
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
              fieldNames.add("Idmaquinaria");
              fieldNames.add("Nombre");
              fieldNames.add("Referencia");
              fieldNames.add("Bastidor");
              fieldNames.add("Matricula");
              fieldNames.add("Fechaalta");
              fieldNames.add("Fechabaja");
              fieldNames.add("Responsable");
              fieldNames.add("Coste");
              fieldNames.add("Modelo");
              fieldNames.add("Marca");
              fieldNames.add("Tipo");
              fieldNames.add("Alquilado");
              fieldNames.add("Observaciones");
              fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
          if (name.equals("Idmaquinaria"))
        {
                return new Integer(getIdmaquinaria());
            }
          if (name.equals("Nombre"))
        {
                return getNombre();
            }
          if (name.equals("Referencia"))
        {
                return getReferencia();
            }
          if (name.equals("Bastidor"))
        {
                return getBastidor();
            }
          if (name.equals("Matricula"))
        {
                return getMatricula();
            }
          if (name.equals("Fechaalta"))
        {
                return getFechaalta();
            }
          if (name.equals("Fechabaja"))
        {
                return getFechabaja();
            }
          if (name.equals("Responsable"))
        {
                return getResponsable();
            }
          if (name.equals("Coste"))
        {
                return new Double(getCoste());
            }
          if (name.equals("Modelo"))
        {
                return getModelo();
            }
          if (name.equals("Marca"))
        {
                return getMarca();
            }
          if (name.equals("Tipo"))
        {
                return getTipo();
            }
          if (name.equals("Alquilado"))
        {
                return new Integer(getAlquilado());
            }
          if (name.equals("Observaciones"))
        {
                return getObservaciones();
            }
          return null;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
          if (name.equals(MaquinariasPeer.IDMAQUINARIA))
        {
                return new Integer(getIdmaquinaria());
            }
          if (name.equals(MaquinariasPeer.NOMBRE))
        {
                return getNombre();
            }
          if (name.equals(MaquinariasPeer.REFERENCIA))
        {
                return getReferencia();
            }
          if (name.equals(MaquinariasPeer.BASTIDOR))
        {
                return getBastidor();
            }
          if (name.equals(MaquinariasPeer.MATRICULA))
        {
                return getMatricula();
            }
          if (name.equals(MaquinariasPeer.FECHAALTA))
        {
                return getFechaalta();
            }
          if (name.equals(MaquinariasPeer.FECHABAJA))
        {
                return getFechabaja();
            }
          if (name.equals(MaquinariasPeer.RESPONSABLE))
        {
                return getResponsable();
            }
          if (name.equals(MaquinariasPeer.COSTE))
        {
                return new Double(getCoste());
            }
          if (name.equals(MaquinariasPeer.MODELO))
        {
                return getModelo();
            }
          if (name.equals(MaquinariasPeer.MARCA))
        {
                return getMarca();
            }
          if (name.equals(MaquinariasPeer.TIPO))
        {
                return getTipo();
            }
          if (name.equals(MaquinariasPeer.ALQUILADO))
        {
                return new Integer(getAlquilado());
            }
          if (name.equals(MaquinariasPeer.OBSERVACIONES))
        {
                return getObservaciones();
            }
          return null;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
            if (pos == 0)
        {
                return new Integer(getIdmaquinaria());
            }
              if (pos == 1)
        {
                return getNombre();
            }
              if (pos == 2)
        {
                return getReferencia();
            }
              if (pos == 3)
        {
                return getBastidor();
            }
              if (pos == 4)
        {
                return getMatricula();
            }
              if (pos == 5)
        {
                return getFechaalta();
            }
              if (pos == 6)
        {
                return getFechabaja();
            }
              if (pos == 7)
        {
                return getResponsable();
            }
              if (pos == 8)
        {
                return new Double(getCoste());
            }
              if (pos == 9)
        {
                return getModelo();
            }
              if (pos == 10)
        {
                return getMarca();
            }
              if (pos == 11)
        {
                return getTipo();
            }
              if (pos == 12)
        {
                return new Integer(getAlquilado());
            }
              if (pos == 13)
        {
                return getObservaciones();
            }
              return null;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
          save(MaquinariasPeer.getMapBuilder()
                .getDatabaseMap().getName());
      }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
       * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
       *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
          try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
      }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
          if (!alreadyInSave)
        {
            alreadyInSave = true;


  
            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    MaquinariasPeer.doInsert((Maquinarias) this, con);
                    setNew(false);
                }
                else
                {
                    MaquinariasPeer.doUpdate((Maquinarias) this, con);
                }
            }

                                      
                
                                                  
                
                                  alreadyInSave = false;
        }
      }

                        
      /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param key idmaquinaria ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        throws TorqueException
    {
            setIdmaquinaria(((NumberKey) key).intValue());
        }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
            setIdmaquinaria(Integer.parseInt(key));
        }

  
    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
          return SimpleKey.keyFor(getIdmaquinaria());
      }
 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
       * It then fills all the association collections and sets the
     * related objects to isNew=true.
       */
      public Maquinarias copy() throws TorqueException
    {
        return copyInto(new Maquinarias());
    }
  
    protected Maquinarias copyInto(Maquinarias copyObj) throws TorqueException
    {
          copyObj.setIdmaquinaria(idmaquinaria);
          copyObj.setNombre(nombre);
          copyObj.setReferencia(referencia);
          copyObj.setBastidor(bastidor);
          copyObj.setMatricula(matricula);
          copyObj.setFechaalta(fechaalta);
          copyObj.setFechabaja(fechabaja);
          copyObj.setResponsable(responsable);
          copyObj.setCoste(coste);
          copyObj.setModelo(modelo);
          copyObj.setMarca(marca);
          copyObj.setTipo(tipo);
          copyObj.setAlquilado(alquilado);
          copyObj.setObservaciones(observaciones);
  
                            copyObj.setIdmaquinaria( -1);
                                                                                          
                                      
                                                  
                            return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public MaquinariasPeer getPeer()
    {
        return peer;
    }

    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("Maquinarias:\n");
        str.append("Idmaquinaria = ")
               .append(getIdmaquinaria())
             .append("\n");
        str.append("Nombre = ")
               .append(getNombre())
             .append("\n");
        str.append("Referencia = ")
               .append(getReferencia())
             .append("\n");
        str.append("Bastidor = ")
               .append(getBastidor())
             .append("\n");
        str.append("Matricula = ")
               .append(getMatricula())
             .append("\n");
        str.append("Fechaalta = ")
               .append(getFechaalta())
             .append("\n");
        str.append("Fechabaja = ")
               .append(getFechabaja())
             .append("\n");
        str.append("Responsable = ")
               .append(getResponsable())
             .append("\n");
        str.append("Coste = ")
               .append(getCoste())
             .append("\n");
        str.append("Modelo = ")
               .append(getModelo())
             .append("\n");
        str.append("Marca = ")
               .append(getMarca())
             .append("\n");
        str.append("Tipo = ")
               .append(getTipo())
             .append("\n");
        str.append("Alquilado = ")
               .append(getAlquilado())
             .append("\n");
        str.append("Observaciones = ")
               .append(getObservaciones())
             .append("\n");
        return(str.toString());
    }
    public String getComplexId()
    {
    ArrayList a = new ArrayList();
      	          a.add(Integer.toString(this.getIdmaquinaria()));
                return  AjaxUtils.concatenateIdFields(a);
    }
}
