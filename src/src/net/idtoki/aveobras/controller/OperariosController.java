package net.idtoki.aveobras.controller;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.ResourceBundle;
import java.util.logging.Logger;

import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stream.StreamSource;

import net.idtoki.aveobras.group.CategoriasGroupBean;
import net.idtoki.aveobras.group.LocalidadesGroupBean;
import net.idtoki.aveobras.group.OperariosGroupBean;
import net.idtoki.aveobras.helper.CategoriasHelper;
import net.idtoki.aveobras.helper.IncidenciasHelper;
import net.idtoki.aveobras.helper.LocalidadesHelper;
import net.idtoki.aveobras.helper.OperariosHelper;
import net.idtoki.aveobras.helper.PartesHelper;
import net.idtoki.aveobras.manager.CategoriasManager;
import net.idtoki.aveobras.manager.LocalidadesManager;
import net.idtoki.aveobras.manager.OperariosManager;
import net.idtoki.aveobras.model.CategoriasPeer;
import net.idtoki.aveobras.model.LocalidadesPeer;
import net.idtoki.aveobras.model.ObrasPeer;
import net.idtoki.aveobras.model.Operarios;
import net.idtoki.aveobras.model.OperariosPeer;
import net.zylk.tools.ajax.AjaxUtils;
import net.zylk.tools.ajax.AjaxUtils.DinamicGridBean;
import net.zylk.tools.format.FormatUtils;
import net.zylk.tools.pdf.PdfUtils;
import net.zylk.tools.xml.XmlUtils;
import net.zylk.torque.TorqueUtils;
import net.zylk.web.WebUtils;

import org.apache.torque.TorqueException;
import org.apache.torque.util.Criteria;

/**
 * The skeleton for this class was autogenerated by Torque on:
 *
 * [Wed Apr 19 12:33:52 CEST 2006]
 *
 *  You should add additional methods to this class to meet the
 *  application requirements.  This class will only be generated as
 *  long as it does not already exist in the output directory.
 */
public class OperariosController
    extends net.idtoki.aveobras.controller.BaseOperariosController
{
 private static final Logger logger = Logger.getLogger("net.idtoki.aveobras.controller.OperariosController");
 private TransformerFactory tFactory = TransformerFactory.newInstance();
 private Transformer operario_transformer = null; 
 private Transformer operarios_transformer = null;   

 public void init(ServletConfig config)
 {
  super.init();
  ResourceBundle resource = ResourceBundle.getBundle("net/idtoki/aveobras/app/config/app-config");
  ServletContext context = config.getServletContext();
  File operario = new File(resource.getString("app.xsl.templates.dir")+"/PdfOperario.xslt");
  Source xslSource = new StreamSource(operario);
  File operarios = new File(resource.getString("app.xsl.templates.dir")+"/PdfListaOperario.xslt");
  Source xslSourceT = new StreamSource(operarios); 	  
  try{
	  operario_transformer = tFactory.newTransformer(xslSource);
	  operarios_transformer = tFactory.newTransformer(xslSourceT);
  }catch (Exception e){
    e.printStackTrace();
  }  
 }
 
 public void serviceAddOperarios(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
		//recojo los parametros del formulario y doy de alta un nuevo Cliente
	 try
	 {
		 utf8RequestService(request);
		 Operarios op = OperariosHelper.createObj(request);
		 OperariosGroupBean opgb = new OperariosGroupBean();
		 op.setFechaalta(FormatUtils.ddmmaaaa2aaaammdd(op.getFechaalta(),"-",""));
		 op.setFechabaja(FormatUtils.ddmmaaaa2aaaammdd(op.getFechabaja(),"-",""));
		 if (op.getCoste()==-1)
			 op.setCoste(0);
		 opgb.setElemento(op);
		 opgb.save();
	 }
	 catch(TorqueException te)
	 {
		 response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
	 }
 }
 
 public StringBuffer replaceStringBuffer (StringBuffer strBA, String strOrigen, String strDestino) 
 {
	 return new StringBuffer(strBA.toString().replaceAll(strOrigen,strDestino));
 }  
 
 private Criteria ordenacion(Criteria c,String CampoOrdenacion,String OrdenOrdenacion) 
 { 
 	if((OrdenOrdenacion != null )&& (OrdenOrdenacion.compareTo("ASC")==0))
 		if ((CampoOrdenacion != null)) //&& (CampoOrdenacion.compareTo("nombre")==0))
 		{
 			//c.clear();
 			c.addAscendingOrderByColumn(CampoOrdenacion.toString());
 		}
 	if  ((OrdenOrdenacion != null) && (OrdenOrdenacion.compareTo("DESC")==0))
 		if ((CampoOrdenacion != null)) //&& (CampoOrdenacion.compareTo("nombre")==0))
 			{
 			//c.clear();
 			c.addDescendingOrderByColumn(CampoOrdenacion.toString());
 		}
 	return c;
 }

 private Criteria filtro(Criteria c,int filtro) 
 { 
 	String cadena = null;
 	 switch (filtro)
 	 {
 	 case 1:
		  //Operarios en Activo
		  c.add(OperariosPeer.FECHABAJA,(Object)cadena,Criteria.ISNULL);
 		  break;
 	 case 2:
		  //Operarios dados de baja
		  c.add(OperariosPeer.FECHABAJA,(Object)cadena,Criteria.ISNOTNULL);
 		  break;
 	 default:
 		 //todas las obras
 		 break;
 	 }
 	return c;
 }
 private Criteria criteriaOperariosTableContent(HttpServletRequest request,Criteria c) throws IOException, ServletException
 {	 
	  String param =  WebUtils.getStringParam(request, new CategoriasHelper().getIdcategoriaName());
	  int paramFiltro =  WebUtils.getintParam(request, "filtro");
	  if(param != null)
			 TorqueUtils.addEqualCriteria(c,OperariosPeer.IDCATEGORIA,param);
	  param =  WebUtils.getStringParam(request, new LocalidadesHelper().getIdlocalidadName());
	  if(param != null)
			 TorqueUtils.addEqualCriteria(c,OperariosPeer.IDLOCALIDAD,param);  	 
 	  String paramSortCol =  WebUtils.getStringParam(request, "sort_col");
 	  String paramSortDir =  WebUtils.getStringParam(request, "sort_dir");
 	  //System.out.println("----query:"+paramQuery+"----col:"+paramSortCol+"----dir:"+paramSortDir+"----filtro:"+paramFiltro);
	  c = filtro(c,paramFiltro);
 	  c = ordenacion(c,paramSortCol,paramSortDir);

 	  return c;
 }  
 
 public void  serviceOperariosTableContent(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 utf8RequestService(request);
	 int numElemPedidosBD = 40;
	 int gap = 0;//gap = viewedRows - numElemVisiblesUltPag	  
	 DinamicGridBean dgb = WebUtils.getDinamicGridBeanParam(request,numElemPedidosBD,gap); 
	 Criteria c =OperariosManager.buildSearchCriteria(dgb);
	 c =criteriaOperariosTableContent(request,c);	 
	 OperariosGroupBean cgb = OperariosManager.getOperarioss(c);
	 dgb.setTotalSize(cgb.getTotalSize());
	  
	 String[] methodos= new String[] {
			 //OperariosHelper.IDCATEGORIA_GET_METHOD_NAME+"OperariosParsed",
			 //OperariosHelper.IDLOCALIDAD_GET_METHOD_NAME+"OperariosParsed",
			 OperariosHelper.REFERENCIA_GET_METHOD_NAME+"OperariosParsed",
			 OperariosHelper.NOMBRE_GET_METHOD_NAME+"OperariosParsed",
			 OperariosHelper.APELLIDOUNO_GET_METHOD_NAME+"OperariosParsed",
//			 OperariosHelper.APELLIDODOS_GET_METHOD_NAME+"OperariosParsed",
			 //OperariosHelper.FECHAALTA_GET_METHOD_NAME+"OperariosParsed",
			 //OperariosHelper.FECHABAJA_GET_METHOD_NAME+"OperariosParsed",
			 //OperariosHelper.NIF_GET_METHOD_NAME+"OperariosParsed",
			 OperariosHelper.NUMEROSS_GET_METHOD_NAME+"OperariosParsed",
			 //OperariosHelper.DIRECCION_GET_METHOD_NAME+"OperariosParsed",
			 //OperariosHelper.CP_GET_METHOD_NAME+"OperariosParsed",
			 OperariosHelper.TELEFONO_GET_METHOD_NAME+"OperariosParsed",
			 OperariosHelper.MOVIL_GET_METHOD_NAME+"OperariosParsed",
			 //OperariosHelper.EMAIL_GET_METHOD_NAME+"OperariosParsed",
			 //OperariosHelper.COSTE_GET_METHOD_NAME+"OperariosParsed",
			 OperariosHelper.EXTERNO_GET_METHOD_NAME+"OperariosParsed2",
				"getEditOperarios",
				"getDeleteOperarios"
				};
	  
	 xmlResponseService(response,AjaxUtils.buildXmlAjaxResponseTableContentFromListObj(
			  										cgb.getAlmacen(),
			  										methodos,
			  										OperariosHelper.IDOPERARIO_GET_METHOD_NAME, dgb,"ISO-8859-1")); 
 }
 
 public void serviceOperariosUlContent(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 utf8RequestService(request);
	 String[] methodos= new String[] {
			 OperariosHelper.IDOPERARIO_GET_METHOD_NAME, 
			 OperariosHelper.NOMBRE_GET_METHOD_NAME,
			 OperariosHelper.APELLIDOUNO_GET_METHOD_NAME
	 };
	 String param =  WebUtils.getStringParam(request, "value");
	 if(param==null || param.length() <= 0)
			 param =  WebUtils.getStringParam(request, new PartesHelper().getIdoperarioName());
	 if(param==null || param.length() <= 0)
		 param =  WebUtils.getStringParam(request, new IncidenciasHelper().getIdoperarioName());	 
	 OperariosGroupBean cgb = OperariosManager.getOperarioss(OperariosManager.buildSearchCriteria(param));
	 simpleResponseService(response, AjaxUtils.buildAjaxULContentFromListObj(cgb.getAlmacen(),methodos, OperariosHelper.COMPLEX_ID_GET_METHOD,"Operarios"));
 }
 
 protected StringBuffer updateIdcategoriaResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
    	return new StringBuffer(OperariosManager.getOperarios(Integer.parseInt(a.get(0).toString())).getIdcategoriaOperariosParsed());
   }
 protected StringBuffer updateIdlocalidadResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
    	return new StringBuffer(OperariosManager.getOperarios(Integer.parseInt(a.get(0).toString())).getIdlocalidadOperariosParsed());
   } 
 
 protected StringBuffer updateReferenciaResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
    	return new StringBuffer(OperariosManager.getOperarios(Integer.parseInt(a.get(0).toString())).getReferenciaOperariosParsed());
   } 
 
 protected StringBuffer updateNombreResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
    	return new StringBuffer(OperariosManager.getOperarios(Integer.parseInt(a.get(0).toString())).getNombreOperariosParsed());
   } 
 
 protected StringBuffer updateApellidounoResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
    	return new StringBuffer(OperariosManager.getOperarios(Integer.parseInt(a.get(0).toString())).getApellidounoOperariosParsed());
   } 
 
 protected StringBuffer updateNumerossResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
    	return new StringBuffer(OperariosManager.getOperarios(Integer.parseInt(a.get(0).toString())).getNumerossOperariosParsed());
   } 
 
 protected StringBuffer updateTelefonoResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
    	return new StringBuffer(OperariosManager.getOperarios(Integer.parseInt(a.get(0).toString())).getTelefonoOperariosParsed());
   } 
 
 protected StringBuffer updateMovilResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
    	return new StringBuffer(OperariosManager.getOperarios(Integer.parseInt(a.get(0).toString())).getMovilOperariosParsed());
   } 
 
 protected StringBuffer updateExternoResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
    	return new StringBuffer(OperariosManager.getOperarios(Integer.parseInt(a.get(0).toString())).getExternoOperariosParsed());
   }  
 
 public void serviceDeleteOperarios(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 int idBorrar=-1;
	 idBorrar=WebUtils.getintParam(request, "borrarId");
	 if (idBorrar!=-1)
		 if (OperariosManager.borraOperarios(idBorrar))
			 WebUtils.writeXmlResponse(response,XmlUtils.buildXmlOKResponse("ISO-8859-1"));
		 else
			 WebUtils.writeXmlResponse(response,XmlUtils.buildXmlNotOKResponse("ISO-8859-1"));			 
 } 
 
 public void serviceOperariosElement(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
  StringBuffer cadena=null;
  Criteria c= new Criteria();
  int claveId=-1;
  claveId=WebUtils.getintParam(request, "operarios.IDOPERARIO");
  if (claveId!=-1)
  {
	  c.add(OperariosPeer.IDOPERARIO, claveId);
  }
  c.addAscendingOrderByColumn(OperariosPeer.IDOPERARIO);
  OperariosGroupBean trgb = OperariosManager.getOperarioss(c);
  
  if (trgb.getTotalSize()!=0)
  {
	  String [] parametros={
			  OperariosHelper.IDOPERARIO_GET_METHOD_NAME,
				 OperariosHelper.IDCATEGORIA_GET_METHOD_NAME+"OperariosParsed",
				 OperariosHelper.IDLOCALIDAD_GET_METHOD_NAME+"OperariosParsed",
				 OperariosHelper.NOMBRE_GET_METHOD_NAME+"OperariosParsed",
				 OperariosHelper.APELLIDOUNO_GET_METHOD_NAME+"OperariosParsed",
				 OperariosHelper.APELLIDODOS_GET_METHOD_NAME+"OperariosParsed",
				 OperariosHelper.REFERENCIA_GET_METHOD_NAME+"OperariosParsed",
				 OperariosHelper.FECHAALTA_GET_METHOD_NAME+"OperariosParsed",
				 OperariosHelper.FECHABAJA_GET_METHOD_NAME+"OperariosParsed",
				 OperariosHelper.NIF_GET_METHOD_NAME+"OperariosParsed",
				 OperariosHelper.NUMEROSS_GET_METHOD_NAME+"OperariosParsed",
				 OperariosHelper.DIRECCION_GET_METHOD_NAME+"OperariosParsed",
				 OperariosHelper.CP_GET_METHOD_NAME+"OperariosParsed",
				 OperariosHelper.TELEFONO_GET_METHOD_NAME+"OperariosParsed",
				 OperariosHelper.MOVIL_GET_METHOD_NAME+"OperariosParsed",
				 OperariosHelper.EMAIL_GET_METHOD_NAME+"OperariosParsed",
				 OperariosHelper.COSTE_GET_METHOD_NAME+"OperariosParsed",
				 OperariosHelper.EXTERNO_GET_METHOD_NAME+"OperariosParsed"	  
	  			};
	  cadena=trgb.buildXml(parametros,null,"ISO-8859-1");
  }
  xmlResponseService(response, cadena);
 } 
 
 public void serviceOperariosCategoria(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
  String cadena=null;
  Criteria c= new Criteria();
  int claveId=-1;
  claveId=WebUtils.getintParam(request, "categorias.IDCATEGORIA");
  if (claveId!=-1)
  {
	  c.add(CategoriasPeer.IDCATEGORIA, claveId);
  }
  c.addAscendingOrderByColumn(CategoriasPeer.IDCATEGORIA);
  CategoriasGroupBean trgb = CategoriasManager.getCategoriass(c);
  
  if (trgb.getTotalSize()!=0)
  {
	  cadena = "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>";
	  cadena = cadena + "<result><operarios.IDCATEGORIA>" + trgb.getCategorias(0).getIdcategoria() + "-" + trgb.getCategorias(0).getDescripcionCategoriasParsed() + "</operarios.IDCATEGORIA></result>";
  }
  
  xmlResponseService(response, new StringBuffer(cadena));
 }   
 
 public void serviceOperariosLocalidad(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
  String cadena=null;
  Criteria c= new Criteria();
  int claveId=-1;
  claveId=WebUtils.getintParam(request, "localidades.IDLOCALIDAD");
  if (claveId!=-1)
  {
	  c.add(LocalidadesPeer.IDLOCALIDAD, claveId);
  }
  c.addAscendingOrderByColumn(LocalidadesPeer.IDLOCALIDAD);
  LocalidadesGroupBean trgb = LocalidadesManager.getLocalidadess(c);
  
  if (trgb.getTotalSize()!=0)
  {
	  cadena = "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>";
	  cadena = cadena + "<result><operarios.IDLOCALIDAD>" + trgb.getLocalidades(0).getIdlocalidad() + "-" + trgb.getLocalidades(0).getNombreLocalidadesParsed() + "</operarios.IDLOCALIDAD></result>";
  }
  
  xmlResponseService(response, new StringBuffer(cadena));
 }   
 
 public void serviceGetOperariosDetallePdf(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 utf8RequestService(request);
	 String[] getMethodos= new String[] {
			  OperariosHelper.IDOPERARIO_GET_METHOD_NAME,
				 OperariosHelper.IDCATEGORIA_GET_METHOD_NAME+"OperariosParsed",
				 OperariosHelper.IDLOCALIDAD_GET_METHOD_NAME+"OperariosParsed",
				 OperariosHelper.NOMBRE_GET_METHOD_NAME+"OperariosParsed",
				 OperariosHelper.REFERENCIA_GET_METHOD_NAME+"OperariosParsed",
				 OperariosHelper.APELLIDOUNO_GET_METHOD_NAME+"OperariosParsed",
				 OperariosHelper.APELLIDODOS_GET_METHOD_NAME+"OperariosParsed",
				 OperariosHelper.FECHAALTA_GET_METHOD_NAME+"OperariosParsed",
				 OperariosHelper.FECHABAJA_GET_METHOD_NAME+"OperariosParsed",
				 OperariosHelper.NIF_GET_METHOD_NAME+"OperariosParsed",
				 OperariosHelper.NUMEROSS_GET_METHOD_NAME+"OperariosParsed",
				 OperariosHelper.DIRECCION_GET_METHOD_NAME+"OperariosParsed",
				 OperariosHelper.CP_GET_METHOD_NAME+"OperariosParsed",
				 OperariosHelper.TELEFONO_GET_METHOD_NAME+"OperariosParsed",
				 OperariosHelper.MOVIL_GET_METHOD_NAME+"OperariosParsed",
				 OperariosHelper.EMAIL_GET_METHOD_NAME+"OperariosParsed",
				 OperariosHelper.COSTE_GET_METHOD_NAME+"OperariosParsed",
				 OperariosHelper.EXTERNO_GET_METHOD_NAME+"OperariosParsed2"	
			 };
	  
	 
	 OperariosGroupBean tgb = new OperariosGroupBean();
	 try
	{
		tgb.setElemento(OperariosHelper.getOperarios(request));
	} catch (TorqueException e)
	{
		logger.severe(e.getMessage());
	}
	
	 byte[] content =  PdfUtils.getBytes(replaceStringBuffer(tgb.buildXml(getMethodos, null,"ISO-8859-1"),"n/a"," "), operario_transformer,"ISO-8859-1");
	   response.addHeader("content-disposition","attachment;filename=operarioDetalle.pdf");
	   response.setContentType("application/pdf");
	   response.setHeader("Cache-Control", "");//para que funcione en IE
	   response.setContentLength(content.length);
	   response.getOutputStream().write(content);
	   response.getOutputStream().flush();  
	   response.getOutputStream().close();
	
 }  
 
 public void serviceOperariosTableContentPdf(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 utf8RequestService(request);
	  Criteria c= new Criteria();
	  String paramQuery =  WebUtils.getStringParam(request, "query");
	  if ((paramQuery != null)&& (paramQuery.compareTo("")!=0) )
		  c = OperariosManager.buildSearchCriteria(paramQuery);   
	  c =criteriaOperariosTableContent(request,c);  
	  OperariosGroupBean tgb = OperariosManager.getOperarioss(c);
  
  String[] methodos= new String[] {	
//			 OperariosHelper.IDCATEGORIA_GET_METHOD_NAME+"OperariosParsed",
//			 OperariosHelper.IDLOCALIDAD_GET_METHOD_NAME+"OperariosParsed",
			 OperariosHelper.REFERENCIA_GET_METHOD_NAME+"OperariosParsed",
			 OperariosHelper.NOMBRE_GET_METHOD_NAME+"OperariosParsed",
			 OperariosHelper.APELLIDOUNO_GET_METHOD_NAME+"OperariosParsed",
//			 OperariosHelper.APELLIDODOS_GET_METHOD_NAME+"OperariosParsed",
//			 OperariosHelper.FECHAALTA_GET_METHOD_NAME+"OperariosParsed",
//			 OperariosHelper.FECHABAJA_GET_METHOD_NAME+"OperariosParsed",
//			 OperariosHelper.NIF_GET_METHOD_NAME+"OperariosParsed",
			 OperariosHelper.NUMEROSS_GET_METHOD_NAME+"OperariosParsed",
//			 OperariosHelper.DIRECCION_GET_METHOD_NAME+"OperariosParsed",
//			 OperariosHelper.CP_GET_METHOD_NAME+"OperariosParsed",
			 OperariosHelper.TELEFONO_GET_METHOD_NAME+"OperariosParsed",
			 OperariosHelper.MOVIL_GET_METHOD_NAME+"OperariosParsed",
//			 OperariosHelper.EMAIL_GET_METHOD_NAME+"OperariosParsed",
//			 OperariosHelper.COSTE_GET_METHOD_NAME+"OperariosParsed",
			 OperariosHelper.EXTERNO_GET_METHOD_NAME+"OperariosParsed2"
			};
  
	 byte[] content =  PdfUtils.getBytes(replaceStringBuffer(tgb.buildXml(methodos, null,"ISO-8859-1"),"n/a"," "), operarios_transformer,"ISO-8859-1");
	   response.addHeader("content-disposition","attachment;filename=ListaOperario.pdf");
	   response.setContentType("application/pdf");
	   response.setHeader("Cache-Control", "");//para que funcione en IE
	   response.setContentLength(content.length);
	   response.getOutputStream().write(content);
	   response.getOutputStream().flush();  
	   response.getOutputStream().close();

 } 
 
} 



