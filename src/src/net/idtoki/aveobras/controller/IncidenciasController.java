package net.idtoki.aveobras.controller;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.ResourceBundle;
import java.util.logging.Logger;

import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stream.StreamSource;

import net.idtoki.aveobras.group.IncidenciasGroupBean;
import net.idtoki.aveobras.group.MaquinariasGroupBean;
import net.idtoki.aveobras.group.OperariosGroupBean;
import net.idtoki.aveobras.group.TipoincidenciasGroupBean;
import net.idtoki.aveobras.group.UejecucionesGroupBean;
import net.idtoki.aveobras.helper.IncidenciasHelper;
import net.idtoki.aveobras.helper.MaquinariasHelper;
import net.idtoki.aveobras.helper.OperariosHelper;
import net.idtoki.aveobras.helper.TipoincidenciasHelper;
import net.idtoki.aveobras.helper.UejecucionesHelper;
import net.idtoki.aveobras.manager.IncidenciasManager;
import net.idtoki.aveobras.manager.MaquinariasManager;
import net.idtoki.aveobras.manager.OperariosManager;
import net.idtoki.aveobras.manager.TipoincidenciasManager;
import net.idtoki.aveobras.manager.UejecucionesManager;
import net.idtoki.aveobras.model.Incidencias;
import net.idtoki.aveobras.model.IncidenciasPeer;
import net.idtoki.aveobras.model.MaquinariasPeer;
import net.idtoki.aveobras.model.OperariosPeer;
import net.idtoki.aveobras.model.PartesPeer;
import net.idtoki.aveobras.model.TipoincidenciasPeer;
import net.idtoki.aveobras.model.UejecucionesPeer;
import net.zylk.tools.ajax.AjaxUtils;
import net.zylk.tools.ajax.AjaxUtils.DinamicGridBean;
import net.zylk.tools.format.FormatUtils;
import net.zylk.tools.pdf.PdfUtils;
import net.zylk.tools.xml.XmlUtils;
import net.zylk.torque.TorqueUtils;
import net.zylk.web.WebUtils;

import org.apache.torque.TorqueException;
import org.apache.torque.util.Criteria;

/**
 * The skeleton for this class was autogenerated by Torque on:
 *
 * [Wed Apr 19 12:33:52 CEST 2006]
 *
 *  You should add additional methods to this class to meet the
 *  application requirements.  This class will only be generated as
 *  long as it does not already exist in the output directory.
 */
public class IncidenciasController
    extends net.idtoki.aveobras.controller.BaseIncidenciasController
{
 private static final Logger logger = Logger.getLogger("net.idtoki.aveobras.controller.IncidenciasController");
 private TransformerFactory tFactory = TransformerFactory.newInstance();
 private Transformer incidencia_transformer = null; 
 private Transformer incidencias_transformer = null;  

 public void init(ServletConfig config)
 {
  super.init();
  ResourceBundle resource = ResourceBundle.getBundle("net/idtoki/aveobras/app/config/app-config");
  ServletContext context = config.getServletContext();
  File incidencia = new File(resource.getString("app.xsl.templates.dir")+"/PdfIncidencia.xslt");
  Source xslSource = new StreamSource(incidencia);
  File incidencias = new File(resource.getString("app.xsl.templates.dir")+"/PdfListaIncidencia.xslt");
  Source xslSourceT = new StreamSource(incidencias); 	  
  try{
	  incidencia_transformer = tFactory.newTransformer(xslSource);
	  incidencias_transformer = tFactory.newTransformer(xslSourceT);
  }catch (Exception e){
    e.printStackTrace();
  }  
 }
 
 public void serviceAddIncidencias(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
		//recojo los parametros del formulario y doy de alta un nuevo Cliente
	 try
	 {
		 utf8RequestService(request);
		 Incidencias in = IncidenciasHelper.createObj(request);
		 IncidenciasGroupBean ingb = new IncidenciasGroupBean();
		 in.setFecha(FormatUtils.ddmmaaaa2aaaammdd(in.getFecha(),"-",""));
		 if (in.getHoras()==-1)
			 in.setHoras(0);
		 if (in.getImporte()==-1)
			 in.setImporte(0);
		 if (in.getKilometros()==-1)
			 in.setKilometros(0);
		 if (in.getTonelaje()==-1)
			 in.setTonelaje(0);
		 ingb.setElemento(in);
		 ingb.save();
	 }
	 catch(TorqueException te)
	 {
		 response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
	 }
 }
 
 public StringBuffer replaceStringBuffer (StringBuffer strBA, String strOrigen, String strDestino) 
 {
	 return new StringBuffer(strBA.toString().replaceAll(strOrigen,strDestino));
 } 
 
 private Criteria ordenacion(Criteria c,String CampoOrdenacion,String OrdenOrdenacion) 
 { 
 	if((OrdenOrdenacion != null )&& (OrdenOrdenacion.compareTo("ASC")==0))
 		if ((CampoOrdenacion != null)) //&& (CampoOrdenacion.compareTo("nombre")==0))
 		{
 			//c.clear();
 			c.addAscendingOrderByColumn(CampoOrdenacion.toString());
 		}
 	if  ((OrdenOrdenacion != null) && (OrdenOrdenacion.compareTo("DESC")==0))
 		if ((CampoOrdenacion != null)) //&& (CampoOrdenacion.compareTo("nombre")==0))
 			{
 			//c.clear();
 			c.addDescendingOrderByColumn(CampoOrdenacion.toString());
 		}
 	return c;
 }

 private Criteria criteriaIncidenciasTableContent(HttpServletRequest request,Criteria c) throws IOException, ServletException
 {
	  String param =  WebUtils.getStringParam(request, new OperariosHelper().getIdoperarioName());
	  if(param != null)
			 TorqueUtils.addEqualCriteria(c,IncidenciasPeer.IDOPERARIO,param);
	  param =  WebUtils.getStringParam(request, new MaquinariasHelper().getIdmaquinariaName());
	  if(param != null)
			 TorqueUtils.addEqualCriteria(c,IncidenciasPeer.IDMAQUINARIA,param);
	  param =  WebUtils.getStringParam(request, new UejecucionesHelper().getIduejecucionName());
	  if(param != null)
			 TorqueUtils.addEqualCriteria(c,IncidenciasPeer.IDUEJECUCION,param);
	  param =  WebUtils.getStringParam(request, new TipoincidenciasHelper().getIdtipoincidenciaName());
	  if(param != null)
			 TorqueUtils.addEqualCriteria(c,IncidenciasPeer.IDTIPOINCIDENCIA,param);  	 
 	  String paramSortCol =  WebUtils.getStringParam(request, "sort_col");
 	  String paramSortDir =  WebUtils.getStringParam(request, "sort_dir");
 	  //System.out.println("----query:"+paramQuery+"----col:"+paramSortCol+"----dir:"+paramSortDir+"----filtro:"+paramFiltro);
 	  c = ordenacion(c,paramSortCol,paramSortDir);

 	  return c;
 }  
 
 public void  serviceIncidenciasTableContent(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 utf8RequestService(request);
	 int numElemPedidosBD = 40;
	 int gap = 0;//gap = viewedRows - numElemVisiblesUltPag	  
	 DinamicGridBean dgb = WebUtils.getDinamicGridBeanParam(request,numElemPedidosBD,gap); 
	 Criteria c =IncidenciasManager.buildSearchCriteria(dgb); 
	 c =criteriaIncidenciasTableContent(request,c);	  
	 
	 IncidenciasGroupBean cgb = IncidenciasManager.getIncidenciass(c);
	 dgb.setTotalSize(cgb.getTotalSize());
	  
	 String[] methodos= new String[] {
			 IncidenciasHelper.REFERENCIA_GET_METHOD_NAME+"IncidenciasParsed",
			 IncidenciasHelper.IDUEJECUCION_GET_METHOD_NAME+"IncidenciasParsed",
			 IncidenciasHelper.IDOPERARIO_GET_METHOD_NAME+"IncidenciasParsed",
			 IncidenciasHelper.IDMAQUINARIA_GET_METHOD_NAME+"IncidenciasParsed",
			 IncidenciasHelper.IDTIPOINCIDENCIA_GET_METHOD_NAME+"IncidenciasParsed",
			 IncidenciasHelper.FECHA_GET_METHOD_NAME+"IncidenciasParsed",
//			 IncidenciasHelper.DESCRIPCION_GET_METHOD_NAME+"IncidenciasParsed",
//			 IncidenciasHelper.OBSERVACIONES_GET_METHOD_NAME+"IncidenciasParsed",
			 IncidenciasHelper.HORAS_GET_METHOD_NAME+"IncidenciasParsed",
//			 IncidenciasHelper.IMPORTE_GET_METHOD_NAME+"IncidenciasParsed",
//			 IncidenciasHelper.KILOMETROS_GET_METHOD_NAME+"IncidenciasParsed",
//			 IncidenciasHelper.TONELAJE_GET_METHOD_NAME+"IncidenciasParsed",
				"getEditIncidencias",
				"getDuplicarIncidencias",
				"getDeleteIncidencias"
				};
	  
	 xmlResponseService(response,AjaxUtils.buildXmlAjaxResponseTableContentFromListObj(
			  										cgb.getAlmacen(),
			  										methodos,
			  										IncidenciasHelper.IDINCIDENCIA_GET_METHOD_NAME, dgb,"ISO-8859-1")); 
 }
 
 
 protected StringBuffer updateIdoperarioResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
    	return new StringBuffer(IncidenciasManager.getIncidencias(Integer.parseInt(a.get(0).toString())).getIdoperarioIncidenciasParsed());
   }
 
 protected StringBuffer updateIdmaquinariaResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
    	return new StringBuffer(IncidenciasManager.getIncidencias(Integer.parseInt(a.get(0).toString())).getIdmaquinariaIncidenciasParsed());
   }
 
 protected StringBuffer updateIduejecucionResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
    	return new StringBuffer(IncidenciasManager.getIncidencias(Integer.parseInt(a.get(0).toString())).getIduejecucionIncidenciasParsed());
   } 
 
 protected StringBuffer updateIdtipoincidenciaResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
    	return new StringBuffer(IncidenciasManager.getIncidencias(Integer.parseInt(a.get(0).toString())).getIdtipoincidenciaIncidenciasParsed());
   } 
 
 protected StringBuffer updateReferenciaResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
    	return new StringBuffer(IncidenciasManager.getIncidencias(Integer.parseInt(a.get(0).toString())).getReferenciaIncidenciasParsed());
   }  
 
 protected StringBuffer updateFechaincidenciaResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
    	return new StringBuffer(IncidenciasManager.getIncidencias(Integer.parseInt(a.get(0).toString())).getFechaIncidenciasParsed());
   }  

 protected StringBuffer updateHorasResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
    	return new StringBuffer(IncidenciasManager.getIncidencias(Integer.parseInt(a.get(0).toString())).getHorasIncidenciasParsed());
   }  
 
 public void serviceDeleteIncidencias(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 int idBorrar=-1;
	 idBorrar=WebUtils.getintParam(request, "borrarId");
	 if (idBorrar!=-1)
		 if (IncidenciasManager.borraIncidencias(idBorrar))
			 WebUtils.writeXmlResponse(response,XmlUtils.buildXmlOKResponse("ISO-8859-1"));
		 else
			 WebUtils.writeXmlResponse(response,XmlUtils.buildXmlNotOKResponse("ISO-8859-1"));			 
 } 
 
 public void serviceDuplicarIncidencias(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 int idDuplicar=-1;
	 idDuplicar=WebUtils.getintParam(request, "duplicarId");
	 if (idDuplicar!=-1)
		 IncidenciasManager.duplicarIncidencias(idDuplicar);
 } 
 
 public void serviceIncidenciasElement(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
  StringBuffer cadena=null;
  Criteria c= new Criteria();
  int claveId=-1;
  claveId=WebUtils.getintParam(request, "incidencias.IDINCIDENCIA");
  if (claveId!=-1)
  {
	  c.add(IncidenciasPeer.IDINCIDENCIA, claveId);
  }
  c.addAscendingOrderByColumn(IncidenciasPeer.IDINCIDENCIA);
  IncidenciasGroupBean trgb = IncidenciasManager.getIncidenciass(c);
  
  if (trgb.getTotalSize()!=0)
  {
	  String [] parametros={
			  	 IncidenciasHelper.IDINCIDENCIA_GET_METHOD_NAME,
				 IncidenciasHelper.IDOPERARIO_GET_METHOD_NAME+"IncidenciasParsed",
				 IncidenciasHelper.IDMAQUINARIA_GET_METHOD_NAME+"IncidenciasParsed",
				 IncidenciasHelper.IDUEJECUCION_GET_METHOD_NAME+"IncidenciasParsed",
				 IncidenciasHelper.IDTIPOINCIDENCIA_GET_METHOD_NAME+"IncidenciasParsed",
				 IncidenciasHelper.REFERENCIA_GET_METHOD_NAME+"IncidenciasParsed",				 
				 IncidenciasHelper.FECHA_GET_METHOD_NAME+"IncidenciasParsed",
				 IncidenciasHelper.DESCRIPCION_GET_METHOD_NAME+"IncidenciasParsed",
				 IncidenciasHelper.OBSERVACIONES_GET_METHOD_NAME+"IncidenciasParsed",
				 IncidenciasHelper.HORAS_GET_METHOD_NAME+"IncidenciasParsed",
				 IncidenciasHelper.IMPORTE_GET_METHOD_NAME+"IncidenciasParsed",
				 IncidenciasHelper.KILOMETROS_GET_METHOD_NAME+"IncidenciasParsed",
				 IncidenciasHelper.TONELAJE_GET_METHOD_NAME+"IncidenciasParsed"
	  			};
	  cadena=trgb.buildXml(parametros,null,"ISO-8859-1");
  }
  xmlResponseService(response, cadena);
 } 
 
 public void serviceIncidenciasOperario(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
  String cadena=null;
  Criteria c= new Criteria();
  int claveId=-1;
  claveId=WebUtils.getintParam(request, "operarios.IDOPERARIO");
  if (claveId!=-1)
  {
	  c.add(OperariosPeer.IDOPERARIO, claveId);
  }
  c.addAscendingOrderByColumn(OperariosPeer.IDOPERARIO);
  OperariosGroupBean trgb = OperariosManager.getOperarioss(c);
  
  if (trgb.getTotalSize()!=0)
  {
	  cadena = "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>";
	  cadena = cadena + "<result><incidencias.IDOPERARIO>" + trgb.getOperarios(0).getIdoperario() + "-" + trgb.getOperarios(0).getNombreOperariosParsed() + " " + trgb.getOperarios(0).getApellidounoOperariosParsed() + "</incidencias.IDOPERARIO></result>";
  }
  
  xmlResponseService(response, new StringBuffer(cadena));
 }  
 
 public void serviceIncidenciasMaquinaria(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
  String cadena=null;
  Criteria c= new Criteria();
  int claveId=-1;
  claveId=WebUtils.getintParam(request, "maquinarias.IDMAQUINARIA");
  if (claveId!=-1)
  {
	  c.add(MaquinariasPeer.IDMAQUINARIA, claveId);
  }
  c.addAscendingOrderByColumn(MaquinariasPeer.IDMAQUINARIA);
  MaquinariasGroupBean trgb = MaquinariasManager.getMaquinariass(c);
  
  if (trgb.getTotalSize()!=0)
  {
	  cadena = "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>";
	  cadena = cadena + "<result><incidencias.IDMAQUINARIA>" + trgb.getMaquinarias(0).getIdmaquinaria() + "-" + trgb.getMaquinarias(0).getMatriculaMaquinariasParsed() + "-" + trgb.getMaquinarias(0).getNombreMaquinariasParsed() + "</incidencias.IDMAQUINARIA></result>";
  }
  
  xmlResponseService(response, new StringBuffer(cadena));
 } 
 
 public void serviceIncidenciasUejecucion(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
  String cadena=null;
  Criteria c= new Criteria();
  int claveId=-1;
  claveId=WebUtils.getintParam(request, "uejecuciones.IDUEJECUCION");
  if (claveId!=-1)
  {
	  c.add(UejecucionesPeer.IDUEJECUCION, claveId);
  }
  c.addAscendingOrderByColumn(UejecucionesPeer.IDUEJECUCION);
  UejecucionesGroupBean trgb = UejecucionesManager.getUejecucioness(c);
  
  if (trgb.getTotalSize()!=0)
  {
	  cadena = "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>";
	  cadena = cadena + "<result><incidencias.IDUEJECUCION>" + trgb.getUejecuciones(0).getIduejecucion() + "-" + trgb.getUejecuciones(0).getIdsubcapituloUejecucionesParsed() + " (" + trgb.getUejecuciones(0).getIdobraUejecucionesParsed() + ")" + "</incidencias.IDUEJECUCION></result>";
  }
  
  xmlResponseService(response, new StringBuffer(cadena));
 } 
 
 public void serviceIncidenciasTipoincidencia(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
  String cadena=null;
  Criteria c= new Criteria();
  int claveId=-1;
  claveId=WebUtils.getintParam(request, "tipoincidencias.IDTIPOINCIDENCIA");
  if (claveId!=-1)
  {
	  c.add(TipoincidenciasPeer.IDTIPOINCIDENCIA, claveId);
  }
  c.addAscendingOrderByColumn(TipoincidenciasPeer.IDTIPOINCIDENCIA);
  TipoincidenciasGroupBean trgb = TipoincidenciasManager.getTipoincidenciass(c);
  
  if (trgb.getTotalSize()!=0)
  {
	  cadena = "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>";
	  cadena = cadena + "<result><incidencias.IDTIPOINCIDENCIA>" + trgb.getTipoincidencias(0).getIdtipoincidencia() + "-" + trgb.getTipoincidencias(0).getDescripcionTipoincidenciasParsed() + "</incidencias.IDTIPOINCIDENCIA></result>";
  }
  
  xmlResponseService(response, new StringBuffer(cadena));
 } 
 
 public void serviceGetIncidenciasDetallePdf(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 utf8RequestService(request);
	 String[] getMethodos= new String[] {
		  	 IncidenciasHelper.IDINCIDENCIA_GET_METHOD_NAME,
			 IncidenciasHelper.IDOPERARIO_GET_METHOD_NAME+"IncidenciasParsed",
			 IncidenciasHelper.IDMAQUINARIA_GET_METHOD_NAME+"IncidenciasParsed",
			 IncidenciasHelper.IDUEJECUCION_GET_METHOD_NAME+"IncidenciasParsed",
			 IncidenciasHelper.IDTIPOINCIDENCIA_GET_METHOD_NAME+"IncidenciasParsed",
			 IncidenciasHelper.REFERENCIA_GET_METHOD_NAME+"IncidenciasParsed",				 
			 IncidenciasHelper.FECHA_GET_METHOD_NAME+"IncidenciasParsed",
			 IncidenciasHelper.DESCRIPCION_GET_METHOD_NAME+"IncidenciasParsed",
			 IncidenciasHelper.OBSERVACIONES_GET_METHOD_NAME+"IncidenciasParsed",
			 IncidenciasHelper.HORAS_GET_METHOD_NAME+"IncidenciasParsed",
			 IncidenciasHelper.IMPORTE_GET_METHOD_NAME+"IncidenciasParsed",
			 IncidenciasHelper.KILOMETROS_GET_METHOD_NAME+"IncidenciasParsed",
			 IncidenciasHelper.TONELAJE_GET_METHOD_NAME+"IncidenciasParsed"
			 };
	  
	 
	 IncidenciasGroupBean tgb = new IncidenciasGroupBean();
	 try
	{
		tgb.setElemento(IncidenciasHelper.getIncidencias(request));
	} catch (TorqueException e)
	{
		logger.severe(e.getMessage());
	}
	
	 byte[] content =  PdfUtils.getBytes(replaceStringBuffer(tgb.buildXml(getMethodos, null,"ISO-8859-1"),"n/a"," "), incidencia_transformer,"ISO-8859-1");
	   response.addHeader("content-disposition","attachment;filename=incidenciaDetalle.pdf");
	   response.setContentType("application/pdf");
	   response.setHeader("Cache-Control", "");//para que funcione en IE
	   response.setContentLength(content.length);
	   response.getOutputStream().write(content);
	   response.getOutputStream().flush();  
	   response.getOutputStream().close();
	
 }  
 
 public void serviceIncidenciasTableContentPdf(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 utf8RequestService(request);
	  Criteria c= new Criteria();
	  String paramQuery =  WebUtils.getStringParam(request, "query");
	  if ((paramQuery != null)&& (paramQuery.compareTo("")!=0) )
		  c = IncidenciasManager.buildSearchCriteria(paramQuery);   
	  c =criteriaIncidenciasTableContent(request,c);
	   
  IncidenciasGroupBean tgb = IncidenciasManager.getIncidenciass(c);
  
  String[] methodos= new String[] {	
			 IncidenciasHelper.REFERENCIA_GET_METHOD_NAME+"IncidenciasParsed",
		  	 IncidenciasHelper.IDOPERARIO_GET_METHOD_NAME+"IncidenciasParsed",
			 IncidenciasHelper.IDMAQUINARIA_GET_METHOD_NAME+"IncidenciasParsed",
			 IncidenciasHelper.IDUEJECUCION_GET_METHOD_NAME+"IncidenciasParsed",
			 IncidenciasHelper.IDTIPOINCIDENCIA_GET_METHOD_NAME+"IncidenciasParsed",
			 IncidenciasHelper.FECHA_GET_METHOD_NAME+"IncidenciasParsed",
//			 IncidenciasHelper.DESCRIPCION_GET_METHOD_NAME+"IncidenciasParsed",
//			 IncidenciasHelper.OBSERVACIONES_GET_METHOD_NAME+"IncidenciasParsed",
			 IncidenciasHelper.HORAS_GET_METHOD_NAME+"IncidenciasParsed",
//			 IncidenciasHelper.IMPORTE_GET_METHOD_NAME+"IncidenciasParsed",
//			 IncidenciasHelper.KILOMETROS_GET_METHOD_NAME+"IncidenciasParsed",
//			 IncidenciasHelper.TONELAJE_GET_METHOD_NAME+"IncidenciasParsed"
			};
  
	 byte[] content =  PdfUtils.getBytes(replaceStringBuffer(tgb.buildXml(methodos, null,"ISO-8859-1"),"n/a"," "), incidencias_transformer,"ISO-8859-1");
	   response.addHeader("content-disposition","attachment;filename=ListaIncidencia.pdf");
	   response.setContentType("application/pdf");
	   response.setHeader("Cache-Control", "");//para que funcione en IE
	   response.setContentLength(content.length);
	   response.getOutputStream().write(content);
	   response.getOutputStream().flush();  
	   response.getOutputStream().close();

 } 
 
}


