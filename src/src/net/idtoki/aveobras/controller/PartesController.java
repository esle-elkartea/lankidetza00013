package net.idtoki.aveobras.controller;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.ResourceBundle;
import java.util.logging.Logger;

import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stream.StreamSource;

import net.idtoki.aveobras.group.MaquinariasGroupBean;
import net.idtoki.aveobras.group.OperariosGroupBean;
import net.idtoki.aveobras.group.PartesGroupBean;
import net.idtoki.aveobras.group.UejecucionesGroupBean;
import net.idtoki.aveobras.helper.MaquinariasHelper;
import net.idtoki.aveobras.helper.OperariosHelper;
import net.idtoki.aveobras.helper.PartesHelper;
import net.idtoki.aveobras.helper.UejecucionesHelper;
import net.idtoki.aveobras.manager.MaquinariasManager;
import net.idtoki.aveobras.manager.OperariosManager;
import net.idtoki.aveobras.manager.PartesManager;
import net.idtoki.aveobras.manager.UejecucionesManager;
import net.idtoki.aveobras.model.MaquinariasPeer;
import net.idtoki.aveobras.model.OperariosPeer;
import net.idtoki.aveobras.model.Partes;
import net.idtoki.aveobras.model.PartesPeer;
import net.idtoki.aveobras.model.UejecucionesPeer;
import net.zylk.tools.ajax.AjaxUtils;
import net.zylk.tools.ajax.AjaxUtils.DinamicGridBean;
import net.zylk.tools.format.FormatUtils;
import net.zylk.tools.pdf.PdfUtils;
import net.zylk.tools.xml.XmlUtils;
import net.zylk.torque.TorqueUtils;
import net.zylk.web.WebUtils;

import org.apache.torque.TorqueException;
import org.apache.torque.util.Criteria;

/**
 * The skeleton for this class was autogenerated by Torque on:
 *
 * [Wed Apr 19 12:33:52 CEST 2006]
 *
 *  You should add additional methods to this class to meet the
 *  application requirements.  This class will only be generated as
 *  long as it does not already exist in the output directory.
 */
public class PartesController
    extends net.idtoki.aveobras.controller.BasePartesController
{
 private static final Logger logger = Logger.getLogger("net.idtoki.aveobras.controller.PartesController");
 private TransformerFactory tFactory = TransformerFactory.newInstance();
 private Transformer parte_transformer = null; 
 private Transformer partes_transformer = null;    

 public void init(ServletConfig config)
 {
  super.init();
  ResourceBundle resource = ResourceBundle.getBundle("net/idtoki/aveobras/app/config/app-config");
  ServletContext context = config.getServletContext();
  File parte = new File(resource.getString("app.xsl.templates.dir")+"/PdfParte.xslt");
  Source xslSource = new StreamSource(parte);
  File partes = new File(resource.getString("app.xsl.templates.dir")+"/PdfListaParte.xslt");
  Source xslSourceT = new StreamSource(partes); 	  
  try{
	  parte_transformer = tFactory.newTransformer(xslSource);
	  partes_transformer = tFactory.newTransformer(xslSourceT);
  }catch (Exception e){
    e.printStackTrace();
  }  
 }
 
 public void serviceAddPartes(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
		//recojo los parametros del formulario y doy de alta un nuevo Cliente
	 try
	 {
		 utf8RequestService(request);
		 Partes pa = PartesHelper.createObj(request);
		 PartesGroupBean pagb = new PartesGroupBean();
		 pa.setFecha(FormatUtils.ddmmaaaa2aaaammdd(pa.getFecha(),"-",""));
		 if (pa.getHoras()==-1)
			 pa.setHoras(0);
		 if (pa.getImporte()==-1)
			 pa.setImporte(0);
		 pagb.setElemento(pa);
		 pagb.save();
	 }
	 catch(TorqueException te)
	 {
		 response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
	 }
 }
 
 public StringBuffer replaceStringBuffer (StringBuffer strBA, String strOrigen, String strDestino) 
 {
	 return new StringBuffer(strBA.toString().replaceAll(strOrigen,strDestino));
 } 
 
 private Criteria ordenacion(Criteria c,String CampoOrdenacion,String OrdenOrdenacion) 
 { 
 	if((OrdenOrdenacion != null )&& (OrdenOrdenacion.compareTo("ASC")==0))
 		if ((CampoOrdenacion != null)) //&& (CampoOrdenacion.compareTo("nombre")==0))
 		{
 			//c.clear();
 			c.addAscendingOrderByColumn(CampoOrdenacion.toString());
 		}
 	if  ((OrdenOrdenacion != null) && (OrdenOrdenacion.compareTo("DESC")==0))
 		if ((CampoOrdenacion != null)) //&& (CampoOrdenacion.compareTo("nombre")==0))
 			{
 			//c.clear();
 			c.addDescendingOrderByColumn(CampoOrdenacion.toString());
 		}
 	return c;
 }

 private Criteria criteriaPartesTableContent(HttpServletRequest request,Criteria c) throws IOException, ServletException
 {
	  String param =  WebUtils.getStringParam(request, new OperariosHelper().getIdoperarioName());
	  if(param != null)
			 TorqueUtils.addEqualCriteria(c,PartesPeer.IDOPERARIO,param);
	  param =  WebUtils.getStringParam(request, new MaquinariasHelper().getIdmaquinariaName());
	  if(param != null)
			 TorqueUtils.addEqualCriteria(c,PartesPeer.IDMAQUINARIA,param);
	  param =  WebUtils.getStringParam(request, new UejecucionesHelper().getIduejecucionName());
	  if(param != null)
			 TorqueUtils.addEqualCriteria(c,PartesPeer.IDUEJECUCION,param);  		 
 	  String paramSortCol =  WebUtils.getStringParam(request, "sort_col");
 	  String paramSortDir =  WebUtils.getStringParam(request, "sort_dir");
 	  //System.out.println("----query:"+paramQuery+"----col:"+paramSortCol+"----dir:"+paramSortDir+"----filtro:"+paramFiltro);
 	  c = ordenacion(c,paramSortCol,paramSortDir);

 	  return c;
 } 
 
 public void  servicePartesTableContent(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 utf8RequestService(request);
	 int numElemPedidosBD = 40;
	 int gap = 0;//gap = viewedRows - numElemVisiblesUltPag	  
	 DinamicGridBean dgb = WebUtils.getDinamicGridBeanParam(request,numElemPedidosBD,gap); 
	 Criteria c =PartesManager.buildSearchCriteria(dgb); 
	 c =criteriaPartesTableContent(request,c);	 
 
	 PartesGroupBean cgb = PartesManager.getPartess(c);
	 dgb.setTotalSize(cgb.getTotalSize());
	  
	 String[] methodos= new String[] {
			 PartesHelper.REFERENCIA_GET_METHOD_NAME+"PartesParsed",
			 PartesHelper.FECHA_GET_METHOD_NAME+"PartesParsed",
			 PartesHelper.IDUEJECUCION_GET_METHOD_NAME+"PartesParsed",
			 PartesHelper.IDOPERARIO_GET_METHOD_NAME+"PartesParsed",
			 PartesHelper.IDMAQUINARIA_GET_METHOD_NAME+"PartesParsed",
//			 PartesHelper.DESCRIPCION_GET_METHOD_NAME+"PartesParsed",
//			 PartesHelper.OBSERVACIONES_GET_METHOD_NAME+"PartesParsed",
			 PartesHelper.HORAS_GET_METHOD_NAME+"PartesParsed",
//			 PartesHelper.IMPORTE_GET_METHOD_NAME+"PartesParsed",
				"getEditPartes",
				"getDuplicarPartes",
				"getDeletePartes"
				};
	  
	 xmlResponseService(response,AjaxUtils.buildXmlAjaxResponseTableContentFromListObj(
			  										cgb.getAlmacen(),
			  										methodos,
			  										PartesHelper.IDPARTE_GET_METHOD_NAME, dgb,"ISO-8859-1")); 
 }
 
 
 protected StringBuffer updateIdoperarioResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
    	return new StringBuffer(PartesManager.getPartes(Integer.parseInt(a.get(0).toString())).getIdoperarioPartesParsed());
   }
 
 protected StringBuffer updateIdmaquinariaResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
    	return new StringBuffer(PartesManager.getPartes(Integer.parseInt(a.get(0).toString())).getIdmaquinariaPartesParsed());
   }
 
 protected StringBuffer updateIduejecucionResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
    	return new StringBuffer(PartesManager.getPartes(Integer.parseInt(a.get(0).toString())).getIduejecucionPartesParsed());
   } 
 
 protected StringBuffer updateReferenciaResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
    	return new StringBuffer(PartesManager.getPartes(Integer.parseInt(a.get(0).toString())).getReferenciaPartesParsed());
   } 
 
 protected StringBuffer updateFechaResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
    	return new StringBuffer(PartesManager.getPartes(Integer.parseInt(a.get(0).toString())).getFechaPartesParsed());
   } 
 
 protected StringBuffer updateHorasResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
    	return new StringBuffer(PartesManager.getPartes(Integer.parseInt(a.get(0).toString())).getHorasPartesParsed());
   }  
 
 public void serviceDeletePartes(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 int idBorrar=-1;
	 idBorrar=WebUtils.getintParam(request, "borrarId");
	 if (idBorrar!=-1)
		 if (PartesManager.borraPartes(idBorrar))
			 WebUtils.writeXmlResponse(response,XmlUtils.buildXmlOKResponse("ISO-8859-1"));
		 else
			 WebUtils.writeXmlResponse(response,XmlUtils.buildXmlNotOKResponse("ISO-8859-1"));			 
 } 
 
 public void serviceDuplicarPartes(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 int idDuplicar=-1;
	 idDuplicar=WebUtils.getintParam(request, "duplicarId");
	 if (idDuplicar!=-1)
		 PartesManager.duplicarPartes(idDuplicar);
 }  
 
 public void servicePartesElement(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
  StringBuffer cadena=null;
  Criteria c= new Criteria();
  int claveId=-1;
  claveId=WebUtils.getintParam(request, "partes.IDPARTE");
  if (claveId!=-1)
  {
	  c.add(PartesPeer.IDPARTE, claveId);
  }
  c.addAscendingOrderByColumn(PartesPeer.IDPARTE);
  PartesGroupBean trgb = PartesManager.getPartess(c);
  
  if (trgb.getTotalSize()!=0)
  {
	  String [] parametros={
			  PartesHelper.IDPARTE_GET_METHOD_NAME,
				 PartesHelper.IDOPERARIO_GET_METHOD_NAME+"PartesParsed",
				 PartesHelper.IDMAQUINARIA_GET_METHOD_NAME+"PartesParsed",
				 PartesHelper.IDUEJECUCION_GET_METHOD_NAME+"PartesParsed",
				 PartesHelper.REFERENCIA_GET_METHOD_NAME+"PartesParsed",
				 PartesHelper.FECHA_GET_METHOD_NAME+"PartesParsed",
				 PartesHelper.DESCRIPCION_GET_METHOD_NAME+"PartesParsed",
				 PartesHelper.OBSERVACIONES_GET_METHOD_NAME+"PartesParsed",
				 PartesHelper.HORAS_GET_METHOD_NAME+"PartesParsed",
				 PartesHelper.IMPORTE_GET_METHOD_NAME+"PartesParsed"  
	  			};
	  cadena=trgb.buildXml(parametros,null,"ISO-8859-1");
  }
  xmlResponseService(response, cadena);
 } 
 
 public void servicePartesOperario(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
  String cadena=null;
  Criteria c= new Criteria();
  int claveId=-1;
  claveId=WebUtils.getintParam(request, "operarios.IDOPERARIO");
  if (claveId!=-1)
  {
	  c.add(OperariosPeer.IDOPERARIO, claveId);
  }
  c.addAscendingOrderByColumn(OperariosPeer.IDOPERARIO);
  OperariosGroupBean trgb = OperariosManager.getOperarioss(c);
  
  if (trgb.getTotalSize()!=0)
  {
	  cadena = "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>";
	  cadena = cadena + "<result><partes.IDOPERARIO>" + trgb.getOperarios(0).getIdoperario() + "-" + trgb.getOperarios(0).getNombreOperariosParsed() + " " + trgb.getOperarios(0).getApellidounoOperariosParsed() + "</partes.IDOPERARIO></result>";
  }
  
  xmlResponseService(response, new StringBuffer(cadena));
 }  
 
 public void servicePartesMaquinaria(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
  String cadena=null;
  Criteria c= new Criteria();
  int claveId=-1;
  claveId=WebUtils.getintParam(request, "maquinarias.IDMAQUINARIA");
  if (claveId!=-1)
  {
	  c.add(MaquinariasPeer.IDMAQUINARIA, claveId);
  }
  c.addAscendingOrderByColumn(MaquinariasPeer.IDMAQUINARIA);
  MaquinariasGroupBean trgb = MaquinariasManager.getMaquinariass(c);
  
  if (trgb.getTotalSize()!=0)
  {
	  cadena = "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>";
	  cadena = cadena + "<result><partes.IDMAQUINARIA>" + trgb.getMaquinarias(0).getIdmaquinaria() + "-" + trgb.getMaquinarias(0).getMatriculaMaquinariasParsed() + "-" + trgb.getMaquinarias(0).getNombreMaquinariasParsed() + "</partes.IDMAQUINARIA></result>";
  }
  
  xmlResponseService(response, new StringBuffer(cadena));
 } 
 
 public void servicePartesUejecucion(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
  String cadena=null;
  Criteria c= new Criteria();
  int claveId=-1;
  claveId=WebUtils.getintParam(request, "uejecuciones.IDUEJECUCION");
  if (claveId!=-1)
  {
	  c.add(UejecucionesPeer.IDUEJECUCION, claveId);
  }
  c.addAscendingOrderByColumn(UejecucionesPeer.IDUEJECUCION);
  UejecucionesGroupBean trgb = UejecucionesManager.getUejecucioness(c);
  
  if (trgb.getTotalSize()!=0)
  {
	  cadena = "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>";
	  cadena = cadena + "<result><partes.IDUEJECUCION>" + trgb.getUejecuciones(0).getIduejecucion() + "-" + trgb.getUejecuciones(0).getIdsubcapituloUejecucionesParsed() + " (" + trgb.getUejecuciones(0).getIdobraUejecucionesParsed() + ")" + "</partes.IDUEJECUCION></result>";
  }
  
  xmlResponseService(response, new StringBuffer(cadena));
 } 
 
 public void serviceGetPartesDetallePdf(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 utf8RequestService(request);
	 String[] getMethodos= new String[] {
			  PartesHelper.IDPARTE_GET_METHOD_NAME,
				 PartesHelper.IDOPERARIO_GET_METHOD_NAME+"PartesParsed",
				 PartesHelper.IDMAQUINARIA_GET_METHOD_NAME+"PartesParsed",
				 PartesHelper.IDUEJECUCION_GET_METHOD_NAME+"PartesParsed",
				 PartesHelper.REFERENCIA_GET_METHOD_NAME+"PartesParsed",
				 PartesHelper.FECHA_GET_METHOD_NAME+"PartesParsed",
				 PartesHelper.DESCRIPCION_GET_METHOD_NAME+"PartesParsed",
				 PartesHelper.OBSERVACIONES_GET_METHOD_NAME+"PartesParsed",
				 PartesHelper.HORAS_GET_METHOD_NAME+"PartesParsed",
				 PartesHelper.IMPORTE_GET_METHOD_NAME+"PartesParsed"  
			 };
	  
	 
	 PartesGroupBean tgb = new PartesGroupBean();
	 try
	{
		tgb.setElemento(PartesHelper.getPartes(request));
	} catch (TorqueException e)
	{
		logger.severe(e.getMessage());
	}
	
	 byte[] content =  PdfUtils.getBytes(replaceStringBuffer(tgb.buildXml(getMethodos, null,"ISO-8859-1"),"n/a"," "), parte_transformer,"ISO-8859-1");
	   response.addHeader("content-disposition","attachment;filename=parteDetalle.pdf");
	   response.setContentType("application/pdf");
	   response.setHeader("Cache-Control", "");//para que funcione en IE
	   response.setContentLength(content.length);
	   response.getOutputStream().write(content);
	   response.getOutputStream().flush();  
	   response.getOutputStream().close();
	
 }  
 
 public void servicePartesTableContentPdf(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 utf8RequestService(request);
	  Criteria c= new Criteria();
	  String paramQuery =  WebUtils.getStringParam(request, "query");
	  if ((paramQuery != null)&& (paramQuery.compareTo("")!=0) )
		  c = PartesManager.buildSearchCriteria(paramQuery);   
	  c =criteriaPartesTableContent(request,c);	 
	   
  PartesGroupBean tgb = PartesManager.getPartess(c);
  
  String[] methodos= new String[] {	
			 PartesHelper.REFERENCIA_GET_METHOD_NAME+"PartesParsed",
			 PartesHelper.IDOPERARIO_GET_METHOD_NAME+"PartesParsed",
			 PartesHelper.IDMAQUINARIA_GET_METHOD_NAME+"PartesParsed",
			 PartesHelper.IDUEJECUCION_GET_METHOD_NAME+"PartesParsed",
			 PartesHelper.FECHA_GET_METHOD_NAME+"PartesParsed",
//			 PartesHelper.DESCRIPCION_GET_METHOD_NAME+"PartesParsed",
//			 PartesHelper.OBSERVACIONES_GET_METHOD_NAME+"PartesParsed",
			 PartesHelper.HORAS_GET_METHOD_NAME+"PartesParsed",
//			 PartesHelper.IMPORTE_GET_METHOD_NAME+"PartesParsed"  
			};
  
	 byte[] content =  PdfUtils.getBytes(replaceStringBuffer(tgb.buildXml(methodos, null,"ISO-8859-1"),"n/a"," "), partes_transformer,"ISO-8859-1");
	   response.addHeader("content-disposition","attachment;filename=ListaParte.pdf");
	   response.setContentType("application/pdf");
	   response.setHeader("Cache-Control", "");//para que funcione en IE
	   response.setContentLength(content.length);
	   response.getOutputStream().write(content);
	   response.getOutputStream().flush();  
	   response.getOutputStream().close();

 } 
 
}


