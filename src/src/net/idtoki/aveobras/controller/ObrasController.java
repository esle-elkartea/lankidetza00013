package net.idtoki.aveobras.controller;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.ResourceBundle;
import java.util.logging.Logger;

import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stream.StreamSource;

import net.idtoki.aveobras.group.ClientesGroupBean;
import net.idtoki.aveobras.group.LocalidadesGroupBean;
import net.idtoki.aveobras.group.ObrasGroupBean;
import net.idtoki.aveobras.helper.ClientesHelper;
import net.idtoki.aveobras.helper.LocalidadesHelper;
import net.idtoki.aveobras.helper.ObrasHelper;
import net.idtoki.aveobras.helper.UejecucionesHelper;
import net.idtoki.aveobras.manager.ClientesManager;
import net.idtoki.aveobras.manager.LocalidadesManager;
import net.idtoki.aveobras.manager.ObrasManager;
import net.idtoki.aveobras.model.ClientesPeer;
import net.idtoki.aveobras.model.LocalidadesPeer;
import net.idtoki.aveobras.model.Obras;
import net.idtoki.aveobras.model.ObrasPeer;
import net.zylk.tools.ajax.AjaxUtils;
import net.zylk.tools.ajax.AjaxUtils.DinamicGridBean;
import net.zylk.tools.format.FormatUtils;
import net.zylk.tools.pdf.PdfUtils;
import net.zylk.tools.xml.XmlUtils;
import net.zylk.torque.TorqueUtils;
import net.zylk.web.WebUtils;

import org.apache.torque.TorqueException;
import org.apache.torque.util.Criteria;

/**
 * The skeleton for this class was autogenerated by Torque on:
 *
 * [Wed Apr 19 12:33:52 CEST 2006]
 *
 *  You should add additional methods to this class to meet the
 *  application requirements.  This class will only be generated as
 *  long as it does not already exist in the output directory.
 */
public class ObrasController
    extends net.idtoki.aveobras.controller.BaseObrasController
{
 private static final Logger logger = Logger.getLogger("net.idtoki.aveobras.controller.ObrasController");
 private TransformerFactory tFactory = TransformerFactory.newInstance();
 private Transformer obra_transformer = null; 
 private Transformer obras_transformer = null;  

 public void init(ServletConfig config)
 {
  super.init();
  ResourceBundle resource = ResourceBundle.getBundle("net/idtoki/aveobras/app/config/app-config");
  ServletContext context = config.getServletContext();
  File obra = new File(resource.getString("app.xsl.templates.dir")+"/PdfObra.xslt");
  Source xslSource = new StreamSource(obra);
  File obras = new File(resource.getString("app.xsl.templates.dir")+"/PdfListaObra.xslt");
  Source xslSourceT = new StreamSource(obras); 	  
  try{
	  obra_transformer = tFactory.newTransformer(xslSource);
	  obras_transformer = tFactory.newTransformer(xslSourceT);
  }catch (Exception e){
    e.printStackTrace();
  }  
 }
 
 public void serviceAddObras(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
		//recojo los parametros del formulario y doy de alta un nuevo Cliente
	 try
	 {
		 utf8RequestService(request);
		 Obras ob = ObrasHelper.createObj(request);
		 ObrasGroupBean ogb = new ObrasGroupBean();
		 ob.setFechaalta(FormatUtils.ddmmaaaa2aaaammdd(ob.getFechaalta(),"-",""));
		 ob.setFechacomienzo(FormatUtils.ddmmaaaa2aaaammdd(ob.getFechacomienzo(),"-",""));
		 ob.setFechafin(FormatUtils.ddmmaaaa2aaaammdd(ob.getFechafin(),"-",""));
		 ogb.setElemento(ob);
		 ogb.save();
	 }
	 catch(TorqueException te)
	 {
		 response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
	 }
 } 
 
 public StringBuffer replaceStringBuffer (StringBuffer strBA, String strOrigen, String strDestino) 
 {
	 return new StringBuffer(strBA.toString().replaceAll(strOrigen,strDestino));
 }  
 
 private Criteria ordenacion(Criteria c,String CampoOrdenacion,String OrdenOrdenacion) 
 { 
 	if((OrdenOrdenacion != null )&& (OrdenOrdenacion.compareTo("ASC")==0))
 		if ((CampoOrdenacion != null)) //&& (CampoOrdenacion.compareTo("nombre")==0))
 		{
 			//c.clear();
 			c.addAscendingOrderByColumn(CampoOrdenacion.toString());
 		}
 	if  ((OrdenOrdenacion != null) && (OrdenOrdenacion.compareTo("DESC")==0))
 		if ((CampoOrdenacion != null)) //&& (CampoOrdenacion.compareTo("nombre")==0))
 			{
 			//c.clear();
 			c.addDescendingOrderByColumn(CampoOrdenacion.toString());
 		}
 	return c;
 }

 private Criteria filtro(Criteria c,int filtro) 
 { 
 	String cadena = null;
 	 switch (filtro)
 	 {
 	 case 1:
		  //Obra sin iniciar
		  c.add(ObrasPeer.FECHACOMIENZO,(Object)cadena,Criteria.ISNULL);
 		  break;
 	 case 2:
		  //Obra en ejecución
		  c.add(ObrasPeer.FECHACOMIENZO,(Object)cadena,Criteria.ISNOTNULL);
		  c.and(ObrasPeer.FECHAFIN,(Object)cadena,Criteria.ISNULL);
 		  break;
 	 case 3:
		  //Obra finalizada
		  c.add(ObrasPeer.FECHACOMIENZO,(Object)cadena,Criteria.ISNOTNULL);
		  c.and(ObrasPeer.FECHAFIN,(Object)cadena,Criteria.ISNOTNULL);
		  break; 		  
 	 default:
 		 //todas las obras
 		 break;
 	 }
 	return c;
 }
 private Criteria criteriaObrasTableContent(HttpServletRequest request,Criteria c) throws IOException, ServletException
 {
	  String param =  WebUtils.getStringParam(request, new ClientesHelper().getIdclienteName());
	  int paramFiltro =  WebUtils.getintParam(request, "filtro");
	  if(param != null)
			 TorqueUtils.addEqualCriteria(c,ObrasPeer.IDCLIENTE,param);
	  param =  WebUtils.getStringParam(request, new LocalidadesHelper().getIdlocalidadName());  
	  if(param != null)
			 TorqueUtils.addEqualCriteria(c,ObrasPeer.IDLOCALIDAD,param);	 
 	  String paramSortCol =  WebUtils.getStringParam(request, "sort_col");
 	  String paramSortDir =  WebUtils.getStringParam(request, "sort_dir");
 	  //System.out.println("----query:"+paramQuery+"----col:"+paramSortCol+"----dir:"+paramSortDir+"----filtro:"+paramFiltro);
	  c = filtro(c,paramFiltro);
 	  c = ordenacion(c,paramSortCol,paramSortDir);

 	  return c;
 }  
 
 public void serviceObrasTableContent(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 utf8RequestService(request);
	 int numElemPedidosBD = 40;
	 int gap = 0;//gap = viewedRows - numElemVisiblesUltPag	  
	 DinamicGridBean dgb = WebUtils.getDinamicGridBeanParam(request,numElemPedidosBD,gap); 
	 Criteria c =ObrasManager.buildSearchCriteria(dgb); 
	 c =criteriaObrasTableContent(request,c);
  
  ObrasGroupBean tgb = ObrasManager.getObrass(c);
  dgb.setTotalSize(tgb.getTotalSize());
  
  String[] methodos= new String[] {	
		  ObrasHelper.REFERENCIA_GET_METHOD_NAME+"ObrasParsed",
		  ObrasHelper.NOMBRE_GET_METHOD_NAME+"ObrasParsed",
		  ObrasHelper.NUMEROCONTRATO_GET_METHOD_NAME+"ObrasParsed",
		  ObrasHelper.IDCLIENTE_GET_METHOD_NAME+"ObrasParsed",
		  ObrasHelper.IDLOCALIDAD_GET_METHOD_NAME+"ObrasParsed",		  
		  ObrasHelper.FECHAALTA_GET_METHOD_NAME+"ObrasParsed",
//		  ObrasHelper.FECHACOMIENZO_GET_METHOD_NAME+"ObrasParsed",
//		  ObrasHelper.FECHAFIN_GET_METHOD_NAME+"ObrasParsed",
//		  ObrasHelper.CALLE_GET_METHOD_NAME+"ObrasParsed",
//		  ObrasHelper.CP_GET_METHOD_NAME+"ObrasParsed",	
//		  ObrasHelper.JORNADAS_GET_METHOD_NAME+"ObrasParsed",		  
//		  ObrasHelper.OBSERVACIONES_GET_METHOD_NAME+"ObrasParsed",
			"getEditObras",
			"getDuplicarObras",
			"getDeleteObras"
			};
  
  xmlResponseService(response,AjaxUtils.buildXmlAjaxResponseTableContentFromListObj(
		  										tgb.getAlmacen(),
		  										methodos,
		  										ObrasHelper.IDOBRA_GET_METHOD_NAME, dgb,"ISO-8859-1"));
 } 
 
 public void serviceObrasUlContent(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 utf8RequestService(request);
	 String[] methodos= new String[] {
			 ObrasHelper.IDOBRA_GET_METHOD_NAME, 
			 ObrasHelper.NOMBRE_GET_METHOD_NAME+"ObrasParsed",
			 ObrasHelper.IDCLIENTE_GET_METHOD_NAME+"ObrasParsed"
			 };
	 String param =  WebUtils.getStringParam(request, "value");
	 if(param==null || param.length() <= 0)
			 param =  WebUtils.getStringParam(request, new UejecucionesHelper().getIdobraName()); 
	 ObrasGroupBean cgb = ObrasManager.getObrass(ObrasManager.buildSearchCriteria(param));
	 simpleResponseService(response, AjaxUtils.buildAjaxULContentFromListObj(cgb.getAlmacen(),methodos, ObrasHelper.COMPLEX_ID_GET_METHOD,"Obras"));
 }

 protected StringBuffer updateIdclienteResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
    	return new StringBuffer(ObrasManager.getObras(Integer.parseInt(a.get(0).toString())).getIdclienteObrasParsed());
   }
 protected StringBuffer updateIdlocalidadResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
    	return new StringBuffer(ObrasManager.getObras(Integer.parseInt(a.get(0).toString())).getIdlocalidadObrasParsed());
   }
 
 protected StringBuffer updateReferenciaResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
    	return new StringBuffer(ObrasManager.getObras(Integer.parseInt(a.get(0).toString())).getReferenciaObrasParsed());
   }
 
 protected StringBuffer updateNombreResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
    	return new StringBuffer(ObrasManager.getObras(Integer.parseInt(a.get(0).toString())).getNombreObrasParsed());
   }
 
 protected StringBuffer updateNumerocontratoResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
    	return new StringBuffer(ObrasManager.getObras(Integer.parseInt(a.get(0).toString())).getNumerocontratoObrasParsed());
   }
 
 protected StringBuffer updateFechaaltaResponseCallBack(String s)
 {
  ArrayList a = AjaxUtils.splitIdFields(s);
    	return new StringBuffer(ObrasManager.getObras(Integer.parseInt(a.get(0).toString())).getFechaaltaObrasParsed());
   }
 
 public void serviceDeleteObras(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 int idBorrar=-1;
	 idBorrar=WebUtils.getintParam(request, "borrarId");
	 if (idBorrar!=-1)
		 if (ObrasManager.borraObras(idBorrar))
			 WebUtils.writeXmlResponse(response,XmlUtils.buildXmlOKResponse("ISO-8859-1"));
		 else
			 WebUtils.writeXmlResponse(response,XmlUtils.buildXmlNotOKResponse("ISO-8859-1"));			 
 } 
 
 public void serviceDuplicarObras(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 int idDuplicar=-1;
	 idDuplicar=WebUtils.getintParam(request, "duplicarId");
	 if (idDuplicar!=-1)
		 ObrasManager.duplicarObras(idDuplicar);
 } 
 
 public void serviceObrasElement(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
  StringBuffer cadena=null;
  Criteria c= new Criteria();
  int claveId=-1;
  claveId=WebUtils.getintParam(request, "obras.IDOBRA");
  if (claveId!=-1)
  {
	  c.add(ObrasPeer.IDOBRA, claveId);
  }
  c.addAscendingOrderByColumn(ObrasPeer.IDOBRA);
  ObrasGroupBean trgb = ObrasManager.getObrass(c);
  
  if (trgb.getTotalSize()!=0)
  {
	  String [] parametros={
			  ObrasHelper.IDOBRA_GET_METHOD_NAME,
			  ObrasHelper.NOMBRE_GET_METHOD_NAME+"ObrasParsed",
			  ObrasHelper.IDCLIENTE_GET_METHOD_NAME+"ObrasParsed",
			  ObrasHelper.IDLOCALIDAD_GET_METHOD_NAME+"ObrasParsed",				  
			  ObrasHelper.NUMEROCONTRATO_GET_METHOD_NAME+"ObrasParsed",
			  ObrasHelper.FECHAALTA_GET_METHOD_NAME+"ObrasParsed",
			  ObrasHelper.FECHACOMIENZO_GET_METHOD_NAME+"ObrasParsed",
			  ObrasHelper.FECHAFIN_GET_METHOD_NAME+"ObrasParsed",
			  ObrasHelper.CALLE_GET_METHOD_NAME+"ObrasParsed",
			  ObrasHelper.CP_GET_METHOD_NAME+"ObrasParsed",	
			  ObrasHelper.REFERENCIA_GET_METHOD_NAME+"ObrasParsed",
			  ObrasHelper.JORNADAS_GET_METHOD_NAME+"ObrasParsed",			  
			  ObrasHelper.OBSERVACIONES_GET_METHOD_NAME+"ObrasParsed",
			  "getImporteObrasParsed"
	  			};
	  cadena=trgb.buildXml(parametros,null,"ISO-8859-1");
  }
  xmlResponseService(response, cadena);
 } 
 
 public void serviceObrasLocalidad(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
  String cadena=null;
  Criteria c= new Criteria();
  int claveId=-1;
  claveId=WebUtils.getintParam(request, "localidades.IDLOCALIDAD");
  if (claveId!=-1)
  {
	  c.add(LocalidadesPeer.IDLOCALIDAD, claveId);
  }
  c.addAscendingOrderByColumn(LocalidadesPeer.IDLOCALIDAD);
  LocalidadesGroupBean trgb = LocalidadesManager.getLocalidadess(c);
  
  if (trgb.getTotalSize()!=0)
  {
	  cadena = "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>";
	  cadena = cadena + "<result><obras.IDLOCALIDAD>" + trgb.getLocalidades(0).getIdlocalidad() + "-" + trgb.getLocalidades(0).getNombreLocalidadesParsed() + "</obras.IDLOCALIDAD></result>";
  }
  
  xmlResponseService(response, new StringBuffer(cadena));
 } 
 
 public void serviceObrasCliente(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
  String cadena=null;
  Criteria c= new Criteria();
  int claveId=-1;
  claveId=WebUtils.getintParam(request, "clientes.IDCLIENTE");
  if (claveId!=-1)
  {
	  c.add(ClientesPeer.IDCLIENTE, claveId);
  }
  c.addAscendingOrderByColumn(ClientesPeer.IDCLIENTE);
  ClientesGroupBean trgb = ClientesManager.getClientess(c);
  
  if (trgb.getTotalSize()!=0)
  {
	  cadena = "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>";
	  cadena = cadena + "<result><obras.IDCLIENTE>" + trgb.getClientes(0).getIdcliente() + "-" + trgb.getClientes(0).getCifClientesParsed() + "-" + trgb.getClientes(0).getNombreClientesParsed() + "</obras.IDCLIENTE></result>";
  }
  
  xmlResponseService(response, new StringBuffer(cadena));
 }  
 
 public void serviceGetObrasDetallePdf(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 utf8RequestService(request);
	 String[] getMethodos= new String[] {
			  ObrasHelper.IDOBRA_GET_METHOD_NAME,
			  ObrasHelper.REFERENCIA_GET_METHOD_NAME+"ObrasParsed",
			  ObrasHelper.NOMBRE_GET_METHOD_NAME+"ObrasParsed",
			  ObrasHelper.IDCLIENTE_GET_METHOD_NAME+"ObrasParsed",
			  ObrasHelper.IDLOCALIDAD_GET_METHOD_NAME+"ObrasParsed",				  
			  ObrasHelper.NUMEROCONTRATO_GET_METHOD_NAME+"ObrasParsed",
			  ObrasHelper.FECHAALTA_GET_METHOD_NAME+"ObrasParsed",
			  ObrasHelper.FECHACOMIENZO_GET_METHOD_NAME+"ObrasParsed",
			  ObrasHelper.FECHAFIN_GET_METHOD_NAME+"ObrasParsed",
			  ObrasHelper.CALLE_GET_METHOD_NAME+"ObrasParsed",
			  ObrasHelper.CP_GET_METHOD_NAME+"ObrasParsed",	
			  ObrasHelper.JORNADAS_GET_METHOD_NAME+"ObrasParsed",			  
			  ObrasHelper.OBSERVACIONES_GET_METHOD_NAME+"ObrasParsed",
			  "getImporteObrasParsed"
			 };
	  
	 
	 ObrasGroupBean tgb = new ObrasGroupBean();
	 try
	{
		tgb.setElemento(ObrasHelper.getObras(request));
	} catch (TorqueException e)
	{
		logger.severe(e.getMessage());
	}
	
	 byte[] content =  PdfUtils.getBytes(replaceStringBuffer(tgb.buildXml(getMethodos, null,"ISO-8859-1"),"n/a"," "), obra_transformer,"ISO-8859-1");
	   response.addHeader("content-disposition","attachment;filename=obraDetalle.pdf");
	   response.setContentType("application/pdf");
	   response.setHeader("Cache-Control", "");//para que funcione en IE
	   response.setContentLength(content.length);
	   response.getOutputStream().write(content);
	   response.getOutputStream().flush();  
	   response.getOutputStream().close();
	
 }  
 
 public void serviceObrasTableContentPdf(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
 {
	 utf8RequestService(request);
	  Criteria c= new Criteria();
	  String paramQuery =  WebUtils.getStringParam(request, "query");
	  if ((paramQuery != null)&& (paramQuery.compareTo("")!=0) )
		  c = ObrasManager.buildSearchCriteria(paramQuery);   
	  c =criteriaObrasTableContent(request,c);	 
	 	  
  ObrasGroupBean tgb = ObrasManager.getObrass(c);
  
  String[] methodos= new String[] {	
		  ObrasHelper.NOMBRE_GET_METHOD_NAME+"ObrasParsed",
		  ObrasHelper.IDCLIENTE_GET_METHOD_NAME+"ObrasParsed",
		  ObrasHelper.REFERENCIA_GET_METHOD_NAME+"ObrasParsed",
		  ObrasHelper.IDLOCALIDAD_GET_METHOD_NAME+"ObrasParsed",				  
		  ObrasHelper.NUMEROCONTRATO_GET_METHOD_NAME+"ObrasParsed",
		  ObrasHelper.FECHAALTA_GET_METHOD_NAME+"ObrasParsed",
		  ObrasHelper.FECHACOMIENZO_GET_METHOD_NAME+"ObrasParsed",
		  ObrasHelper.FECHAFIN_GET_METHOD_NAME+"ObrasParsed",
		  ObrasHelper.CALLE_GET_METHOD_NAME+"ObrasParsed",
		  ObrasHelper.CP_GET_METHOD_NAME+"ObrasParsed",	
		  ObrasHelper.JORNADAS_GET_METHOD_NAME+"ObrasParsed",			  
		  ObrasHelper.OBSERVACIONES_GET_METHOD_NAME+"ObrasParsed"
			};
  
	 byte[] content =  PdfUtils.getBytes(replaceStringBuffer(tgb.buildXml(methodos, null,"ISO-8859-1"),"n/a"," "), obras_transformer,"ISO-8859-1");
	   response.addHeader("content-disposition","attachment;filename=ListaObra.pdf");
	   response.setContentType("application/pdf");
	   response.setHeader("Cache-Control", "");//para que funcione en IE
	   response.setContentLength(content.length);
	   response.getOutputStream().write(content);
	   response.getOutputStream().flush();  
	   response.getOutputStream().close();

 } 
 
}


